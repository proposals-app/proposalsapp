#![allow(
    non_camel_case_types,
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code
)]
use super::super::super::super::typings::{database::get_or_init_postgres_client, networks::get_provider_cache_for_network};
/// THIS IS A GENERATED FILE. DO NOT MODIFY MANUALLY.
///
/// This file was auto generated by rindexer - https://github.com/joshstevens19/rindexer.
/// Any manual changes to this file will be overwritten.
use super::uni_token_abi_gen::RindexerUniGen::{self, RindexerUniGenEvents, RindexerUniGenInstance};
use alloy::{
    primitives::{Address, B256, Bytes},
    sol_types::{SolEvent, SolEventInterface, SolType},
};
use rindexer::{
    FutureExt, PostgresClient, async_trait,
    event::{
        callback_registry::{EventCallbackRegistry, EventCallbackRegistryInformation, EventCallbackResult, EventResult, TxInformation},
        contract_setup::{ContractInformation, NetworkContract},
    },
    generate_random_id,
    manifest::{
        contract::{Contract, ContractDetails},
        yaml::read_manifest,
    },
    provider::{JsonRpcCachedProvider, RindexerProvider},
};
use std::{
    any::Any,
    collections::HashMap,
    error::Error,
    future::Future,
    path::{Path, PathBuf},
    pin::Pin,
    sync::Arc,
};

pub type ApprovalData = RindexerUniGen::Approval;

#[derive(Debug, Clone)]
pub struct ApprovalResult {
    pub event_data: ApprovalData,
    pub tx_information: TxInformation,
}

pub type DelegateChangedData = RindexerUniGen::DelegateChanged;

#[derive(Debug, Clone)]
pub struct DelegateChangedResult {
    pub event_data: DelegateChangedData,
    pub tx_information: TxInformation,
}

pub type DelegateVotesChangedData = RindexerUniGen::DelegateVotesChanged;

#[derive(Debug, Clone)]
pub struct DelegateVotesChangedResult {
    pub event_data: DelegateVotesChangedData,
    pub tx_information: TxInformation,
}

pub type MinterChangedData = RindexerUniGen::MinterChanged;

#[derive(Debug, Clone)]
pub struct MinterChangedResult {
    pub event_data: MinterChangedData,
    pub tx_information: TxInformation,
}

pub type TransferData = RindexerUniGen::Transfer;

#[derive(Debug, Clone)]
pub struct TransferResult {
    pub event_data: TransferData,
    pub tx_information: TxInformation,
}

type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;

#[async_trait]
trait EventCallback {
    async fn call(&self, events: Vec<EventResult>) -> EventCallbackResult<()>;
}

pub struct EventContext<TExtensions>
where
    TExtensions: Send + Sync,
{
    pub database: Arc<PostgresClient>,

    pub extensions: Arc<TExtensions>,
}

// didn't want to use option or none made harder DX
// so a blank struct makes interface nice
pub struct NoExtensions {}
pub fn no_extensions() -> NoExtensions {
    NoExtensions {}
}

pub fn approval_handler<TExtensions, F, Fut>(custom_logic: F) -> ApprovalEventCallbackType<TExtensions>
where
    ApprovalResult: Clone + 'static,
    F: for<'a> Fn(Vec<ApprovalResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
    Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    TExtensions: Send + Sync + 'static,
{
    Arc::new(move |results, context| {
        let custom_logic = custom_logic.clone();
        let results = results.clone();
        let context = Arc::clone(&context);
        async move { (custom_logic)(results, context).await }.boxed()
    })
}

type ApprovalEventCallbackType<TExtensions> = Arc<dyn for<'a> Fn(&'a Vec<ApprovalResult>, Arc<EventContext<TExtensions>>) -> BoxFuture<'a, EventCallbackResult<()>> + Send + Sync>;

pub struct ApprovalEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    callback: ApprovalEventCallbackType<TExtensions>,
    context: Arc<EventContext<TExtensions>>,
}

impl<TExtensions> ApprovalEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    pub async fn handler<F, Fut>(closure: F, extensions: TExtensions) -> Self
    where
        ApprovalResult: Clone + 'static,
        F: for<'a> Fn(Vec<ApprovalResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
        Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    {
        Self {
            callback: approval_handler(closure),
            context: Arc::new(EventContext {
                database: get_or_init_postgres_client().await,

                extensions: Arc::new(extensions),
            }),
        }
    }
}

#[async_trait]
impl<TExtensions> EventCallback for ApprovalEvent<TExtensions>
where
    TExtensions: Send + Sync,
{
    async fn call(&self, events: Vec<EventResult>) -> EventCallbackResult<()> {
        let events_len = events.len();

        // note some can not downcast because it cant decode
        // this happens on events which failed decoding due to
        // not having the right abi for example
        // transfer events with 2 indexed topics cant decode
        // transfer events with 3 indexed topics
        let result: Vec<ApprovalResult> = events
            .into_iter()
            .filter_map(|item| {
                item.decoded_data
                    .downcast::<ApprovalData>()
                    .ok()
                    .map(|arc| ApprovalResult {
                        event_data: (*arc).clone(),
                        tx_information: item.tx_information,
                    })
            })
            .collect();

        if result.len() == events_len {
            (self.callback)(&result, Arc::clone(&self.context)).await
        } else {
            panic!("ApprovalEvent: Unexpected data type - expected: ApprovalData")
        }
    }
}

pub fn delegatechanged_handler<TExtensions, F, Fut>(custom_logic: F) -> DelegateChangedEventCallbackType<TExtensions>
where
    DelegateChangedResult: Clone + 'static,
    F: for<'a> Fn(Vec<DelegateChangedResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
    Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    TExtensions: Send + Sync + 'static,
{
    Arc::new(move |results, context| {
        let custom_logic = custom_logic.clone();
        let results = results.clone();
        let context = Arc::clone(&context);
        async move { (custom_logic)(results, context).await }.boxed()
    })
}

type DelegateChangedEventCallbackType<TExtensions> = Arc<dyn for<'a> Fn(&'a Vec<DelegateChangedResult>, Arc<EventContext<TExtensions>>) -> BoxFuture<'a, EventCallbackResult<()>> + Send + Sync>;

pub struct DelegateChangedEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    callback: DelegateChangedEventCallbackType<TExtensions>,
    context: Arc<EventContext<TExtensions>>,
}

impl<TExtensions> DelegateChangedEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    pub async fn handler<F, Fut>(closure: F, extensions: TExtensions) -> Self
    where
        DelegateChangedResult: Clone + 'static,
        F: for<'a> Fn(Vec<DelegateChangedResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
        Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    {
        Self {
            callback: delegatechanged_handler(closure),
            context: Arc::new(EventContext {
                database: get_or_init_postgres_client().await,

                extensions: Arc::new(extensions),
            }),
        }
    }
}

#[async_trait]
impl<TExtensions> EventCallback for DelegateChangedEvent<TExtensions>
where
    TExtensions: Send + Sync,
{
    async fn call(&self, events: Vec<EventResult>) -> EventCallbackResult<()> {
        let events_len = events.len();

        // note some can not downcast because it cant decode
        // this happens on events which failed decoding due to
        // not having the right abi for example
        // transfer events with 2 indexed topics cant decode
        // transfer events with 3 indexed topics
        let result: Vec<DelegateChangedResult> = events
            .into_iter()
            .filter_map(|item| {
                item.decoded_data
                    .downcast::<DelegateChangedData>()
                    .ok()
                    .map(|arc| DelegateChangedResult {
                        event_data: (*arc).clone(),
                        tx_information: item.tx_information,
                    })
            })
            .collect();

        if result.len() == events_len {
            (self.callback)(&result, Arc::clone(&self.context)).await
        } else {
            panic!("DelegateChangedEvent: Unexpected data type - expected: DelegateChangedData")
        }
    }
}

pub fn delegatevoteschanged_handler<TExtensions, F, Fut>(custom_logic: F) -> DelegateVotesChangedEventCallbackType<TExtensions>
where
    DelegateVotesChangedResult: Clone + 'static,
    F: for<'a> Fn(Vec<DelegateVotesChangedResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
    Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    TExtensions: Send + Sync + 'static,
{
    Arc::new(move |results, context| {
        let custom_logic = custom_logic.clone();
        let results = results.clone();
        let context = Arc::clone(&context);
        async move { (custom_logic)(results, context).await }.boxed()
    })
}

type DelegateVotesChangedEventCallbackType<TExtensions> = Arc<dyn for<'a> Fn(&'a Vec<DelegateVotesChangedResult>, Arc<EventContext<TExtensions>>) -> BoxFuture<'a, EventCallbackResult<()>> + Send + Sync>;

pub struct DelegateVotesChangedEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    callback: DelegateVotesChangedEventCallbackType<TExtensions>,
    context: Arc<EventContext<TExtensions>>,
}

impl<TExtensions> DelegateVotesChangedEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    pub async fn handler<F, Fut>(closure: F, extensions: TExtensions) -> Self
    where
        DelegateVotesChangedResult: Clone + 'static,
        F: for<'a> Fn(Vec<DelegateVotesChangedResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
        Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    {
        Self {
            callback: delegatevoteschanged_handler(closure),
            context: Arc::new(EventContext {
                database: get_or_init_postgres_client().await,

                extensions: Arc::new(extensions),
            }),
        }
    }
}

#[async_trait]
impl<TExtensions> EventCallback for DelegateVotesChangedEvent<TExtensions>
where
    TExtensions: Send + Sync,
{
    async fn call(&self, events: Vec<EventResult>) -> EventCallbackResult<()> {
        let events_len = events.len();

        // note some can not downcast because it cant decode
        // this happens on events which failed decoding due to
        // not having the right abi for example
        // transfer events with 2 indexed topics cant decode
        // transfer events with 3 indexed topics
        let result: Vec<DelegateVotesChangedResult> = events
            .into_iter()
            .filter_map(|item| {
                item.decoded_data
                    .downcast::<DelegateVotesChangedData>()
                    .ok()
                    .map(|arc| DelegateVotesChangedResult {
                        event_data: (*arc).clone(),
                        tx_information: item.tx_information,
                    })
            })
            .collect();

        if result.len() == events_len {
            (self.callback)(&result, Arc::clone(&self.context)).await
        } else {
            panic!("DelegateVotesChangedEvent: Unexpected data type - expected: DelegateVotesChangedData")
        }
    }
}

pub fn minterchanged_handler<TExtensions, F, Fut>(custom_logic: F) -> MinterChangedEventCallbackType<TExtensions>
where
    MinterChangedResult: Clone + 'static,
    F: for<'a> Fn(Vec<MinterChangedResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
    Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    TExtensions: Send + Sync + 'static,
{
    Arc::new(move |results, context| {
        let custom_logic = custom_logic.clone();
        let results = results.clone();
        let context = Arc::clone(&context);
        async move { (custom_logic)(results, context).await }.boxed()
    })
}

type MinterChangedEventCallbackType<TExtensions> = Arc<dyn for<'a> Fn(&'a Vec<MinterChangedResult>, Arc<EventContext<TExtensions>>) -> BoxFuture<'a, EventCallbackResult<()>> + Send + Sync>;

pub struct MinterChangedEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    callback: MinterChangedEventCallbackType<TExtensions>,
    context: Arc<EventContext<TExtensions>>,
}

impl<TExtensions> MinterChangedEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    pub async fn handler<F, Fut>(closure: F, extensions: TExtensions) -> Self
    where
        MinterChangedResult: Clone + 'static,
        F: for<'a> Fn(Vec<MinterChangedResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
        Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    {
        Self {
            callback: minterchanged_handler(closure),
            context: Arc::new(EventContext {
                database: get_or_init_postgres_client().await,

                extensions: Arc::new(extensions),
            }),
        }
    }
}

#[async_trait]
impl<TExtensions> EventCallback for MinterChangedEvent<TExtensions>
where
    TExtensions: Send + Sync,
{
    async fn call(&self, events: Vec<EventResult>) -> EventCallbackResult<()> {
        let events_len = events.len();

        // note some can not downcast because it cant decode
        // this happens on events which failed decoding due to
        // not having the right abi for example
        // transfer events with 2 indexed topics cant decode
        // transfer events with 3 indexed topics
        let result: Vec<MinterChangedResult> = events
            .into_iter()
            .filter_map(|item| {
                item.decoded_data
                    .downcast::<MinterChangedData>()
                    .ok()
                    .map(|arc| MinterChangedResult {
                        event_data: (*arc).clone(),
                        tx_information: item.tx_information,
                    })
            })
            .collect();

        if result.len() == events_len {
            (self.callback)(&result, Arc::clone(&self.context)).await
        } else {
            panic!("MinterChangedEvent: Unexpected data type - expected: MinterChangedData")
        }
    }
}

pub fn transfer_handler<TExtensions, F, Fut>(custom_logic: F) -> TransferEventCallbackType<TExtensions>
where
    TransferResult: Clone + 'static,
    F: for<'a> Fn(Vec<TransferResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
    Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    TExtensions: Send + Sync + 'static,
{
    Arc::new(move |results, context| {
        let custom_logic = custom_logic.clone();
        let results = results.clone();
        let context = Arc::clone(&context);
        async move { (custom_logic)(results, context).await }.boxed()
    })
}

type TransferEventCallbackType<TExtensions> = Arc<dyn for<'a> Fn(&'a Vec<TransferResult>, Arc<EventContext<TExtensions>>) -> BoxFuture<'a, EventCallbackResult<()>> + Send + Sync>;

pub struct TransferEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    callback: TransferEventCallbackType<TExtensions>,
    context: Arc<EventContext<TExtensions>>,
}

impl<TExtensions> TransferEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    pub async fn handler<F, Fut>(closure: F, extensions: TExtensions) -> Self
    where
        TransferResult: Clone + 'static,
        F: for<'a> Fn(Vec<TransferResult>, Arc<EventContext<TExtensions>>) -> Fut + Send + Sync + 'static + Clone,
        Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    {
        Self {
            callback: transfer_handler(closure),
            context: Arc::new(EventContext {
                database: get_or_init_postgres_client().await,

                extensions: Arc::new(extensions),
            }),
        }
    }
}

#[async_trait]
impl<TExtensions> EventCallback for TransferEvent<TExtensions>
where
    TExtensions: Send + Sync,
{
    async fn call(&self, events: Vec<EventResult>) -> EventCallbackResult<()> {
        let events_len = events.len();

        // note some can not downcast because it cant decode
        // this happens on events which failed decoding due to
        // not having the right abi for example
        // transfer events with 2 indexed topics cant decode
        // transfer events with 3 indexed topics
        let result: Vec<TransferResult> = events
            .into_iter()
            .filter_map(|item| {
                item.decoded_data
                    .downcast::<TransferData>()
                    .ok()
                    .map(|arc| TransferResult {
                        event_data: (*arc).clone(),
                        tx_information: item.tx_information,
                    })
            })
            .collect();

        if result.len() == events_len {
            (self.callback)(&result, Arc::clone(&self.context)).await
        } else {
            panic!("TransferEvent: Unexpected data type - expected: TransferData")
        }
    }
}

pub enum UniEventType<TExtensions>
where
    TExtensions: 'static + Send + Sync,
{
    Approval(ApprovalEvent<TExtensions>),
    DelegateChanged(DelegateChangedEvent<TExtensions>),
    DelegateVotesChanged(DelegateVotesChangedEvent<TExtensions>),
    MinterChanged(MinterChangedEvent<TExtensions>),
    Transfer(TransferEvent<TExtensions>),
}

pub async fn uni_contract(network: &str) -> RindexerUniGenInstance<Arc<RindexerProvider>> {
    let address: Address = "0x1f9840a85d5af5bf1d1762f925bdaddc4201f984"
        .parse()
        .expect("Invalid address");
    RindexerUniGen::new(
        address,
        get_provider_cache_for_network(network)
            .await
            .get_inner_provider(),
    )
}

pub async fn decoder_contract(network: &str) -> RindexerUniGenInstance<Arc<RindexerProvider>> {
    if network == "ethereum" {
        RindexerUniGen::new(
            // do not care about address here its decoding makes it easier to handle ValueOrArray
            Address::ZERO,
            get_provider_cache_for_network(network)
                .await
                .get_inner_provider(),
        )
    } else {
        panic!("Network not supported");
    }
}

impl<TExtensions> UniEventType<TExtensions>
where
    TExtensions: 'static + Send + Sync,
{
    pub fn topic_id(&self) -> &'static str {
        match self {
            UniEventType::Approval(_) => "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
            UniEventType::DelegateChanged(_) => "0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f",
            UniEventType::DelegateVotesChanged(_) => "0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724",
            UniEventType::MinterChanged(_) => "0x3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6",
            UniEventType::Transfer(_) => "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
        }
    }

    pub fn event_name(&self) -> &'static str {
        match self {
            UniEventType::Approval(_) => "Approval",
            UniEventType::DelegateChanged(_) => "DelegateChanged",
            UniEventType::DelegateVotesChanged(_) => "DelegateVotesChanged",
            UniEventType::MinterChanged(_) => "MinterChanged",
            UniEventType::Transfer(_) => "Transfer",
        }
    }

    pub fn contract_name(&self) -> String {
        "Uni".to_string()
    }

    async fn get_provider(&self, network: &str) -> Arc<JsonRpcCachedProvider> {
        get_provider_cache_for_network(network).await
    }

    fn decoder(&self, network: &str) -> Arc<dyn Fn(Vec<B256>, Bytes) -> Arc<dyn Any + Send + Sync> + Send + Sync> {
        let decoder_contract = decoder_contract(network);

        match self {
            UniEventType::Approval(_) => Arc::new(
                move |topics: Vec<B256>, data: Bytes| match ApprovalData::decode_raw_log(topics, &data[0..]) {
                    Ok(event) => {
                        let result: ApprovalData = event;
                        Arc::new(result) as Arc<dyn Any + Send + Sync>
                    }
                    Err(error) => Arc::new(error) as Arc<dyn Any + Send + Sync>,
                },
            ),

            UniEventType::DelegateChanged(_) => Arc::new(
                move |topics: Vec<B256>, data: Bytes| match DelegateChangedData::decode_raw_log(topics, &data[0..]) {
                    Ok(event) => {
                        let result: DelegateChangedData = event;
                        Arc::new(result) as Arc<dyn Any + Send + Sync>
                    }
                    Err(error) => Arc::new(error) as Arc<dyn Any + Send + Sync>,
                },
            ),

            UniEventType::DelegateVotesChanged(_) => Arc::new(
                move |topics: Vec<B256>, data: Bytes| match DelegateVotesChangedData::decode_raw_log(topics, &data[0..]) {
                    Ok(event) => {
                        let result: DelegateVotesChangedData = event;
                        Arc::new(result) as Arc<dyn Any + Send + Sync>
                    }
                    Err(error) => Arc::new(error) as Arc<dyn Any + Send + Sync>,
                },
            ),

            UniEventType::MinterChanged(_) => Arc::new(
                move |topics: Vec<B256>, data: Bytes| match MinterChangedData::decode_raw_log(topics, &data[0..]) {
                    Ok(event) => {
                        let result: MinterChangedData = event;
                        Arc::new(result) as Arc<dyn Any + Send + Sync>
                    }
                    Err(error) => Arc::new(error) as Arc<dyn Any + Send + Sync>,
                },
            ),

            UniEventType::Transfer(_) => Arc::new(
                move |topics: Vec<B256>, data: Bytes| match TransferData::decode_raw_log(topics, &data[0..]) {
                    Ok(event) => {
                        let result: TransferData = event;
                        Arc::new(result) as Arc<dyn Any + Send + Sync>
                    }
                    Err(error) => Arc::new(error) as Arc<dyn Any + Send + Sync>,
                },
            ),
        }
    }

    pub async fn register(self, manifest_path: &PathBuf, registry: &mut EventCallbackRegistry) {
        let rindexer_yaml = read_manifest(manifest_path).expect("Failed to read rindexer.yaml");
        let topic_id = self.topic_id();
        let contract_name = self.contract_name();
        let event_name = self.event_name();

        let contract_details = rindexer_yaml
            .contracts
            .iter()
            .find(|c| c.name == contract_name)
            .unwrap_or_else(|| {
                panic!(
                    "Contract {} not found please make sure its defined in the rindexer.yaml",
                    contract_name
                )
            })
            .clone();

        let index_event_in_order = contract_details
            .index_event_in_order
            .as_ref()
            .map_or(false, |vec| vec.contains(&event_name.to_string()));

        // Expect providers to have been initialized, but it's an async init so this should
        // be fast but for correctness we must await each future.
        let mut providers = HashMap::new();
        for n in contract_details.details.iter() {
            let provider = self.get_provider(&n.network).await;
            providers.insert(n.network.clone(), provider);
        }

        let contract = ContractInformation {
            name: contract_details
                .before_modify_name_if_filter_readonly()
                .into_owned(),
            details: contract_details
                .details
                .iter()
                .map(|c| NetworkContract {
                    id: generate_random_id(10),
                    network: c.network.clone(),
                    cached_provider: providers
                        .get(&c.network)
                        .expect("must have a provider")
                        .clone(),
                    decoder: self.decoder(&c.network),
                    indexing_contract_setup: c.indexing_contract_setup(),
                    start_block: c.start_block,
                    end_block: c.end_block,
                    disable_logs_bloom_checks: rindexer_yaml
                        .networks
                        .iter()
                        .find(|n| n.name == c.network)
                        .map_or(false, |n| n.disable_logs_bloom_checks.unwrap_or_default()),
                })
                .collect(),
            abi: contract_details.abi,
            reorg_safe_distance: contract_details.reorg_safe_distance.unwrap_or_default(),
        };

        let callback: Arc<dyn Fn(Vec<EventResult>) -> BoxFuture<'static, EventCallbackResult<()>> + Send + Sync> = match self {
            UniEventType::Approval(event) => {
                let event = Arc::new(event);
                Arc::new(move |result| {
                    let event = Arc::clone(&event);
                    async move { event.call(result).await }.boxed()
                })
            }

            UniEventType::DelegateChanged(event) => {
                let event = Arc::new(event);
                Arc::new(move |result| {
                    let event = Arc::clone(&event);
                    async move { event.call(result).await }.boxed()
                })
            }

            UniEventType::DelegateVotesChanged(event) => {
                let event = Arc::new(event);
                Arc::new(move |result| {
                    let event = Arc::clone(&event);
                    async move { event.call(result).await }.boxed()
                })
            }

            UniEventType::MinterChanged(event) => {
                let event = Arc::new(event);
                Arc::new(move |result| {
                    let event = Arc::clone(&event);
                    async move { event.call(result).await }.boxed()
                })
            }

            UniEventType::Transfer(event) => {
                let event = Arc::new(event);
                Arc::new(move |result| {
                    let event = Arc::clone(&event);
                    async move { event.call(result).await }.boxed()
                })
            }
        };

        registry.register_event(EventCallbackRegistryInformation {
            id: generate_random_id(10),
            indexer_name: "rindexer".to_string(),
            event_name: event_name.to_string(),
            index_event_in_order,
            topic_id: topic_id.parse::<B256>().unwrap(),
            contract,
            callback,
        });
    }
}
