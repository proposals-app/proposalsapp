/// THIS IS A GENERATED FILE. DO NOT MODIFY MANUALLY.
///
/// This file was auto generated by rindexer - https://github.com/joshstevens19/rindexer.
/// Any manual changes to this file will be overwritten.
use alloy::{primitives::U64, transports::http::reqwest::header::HeaderMap};
use rindexer::{
    lazy_static,
    manifest::network::{AddressFiltering, BlockPollFrequency},
    provider::{JsonRpcCachedProvider, RetryClientError, RindexerProvider, create_client},
    public_read_env_value,
};
use std::sync::Arc;
use tokio::sync::OnceCell;

#[allow(dead_code)]
async fn create_shadow_client(
    rpc_url: &str,
    chain_id: u64,
    compute_units_per_second: Option<u64>,
    block_poll_frequency: Option<BlockPollFrequency>,
    max_block_range: Option<U64>,
    address_filtering: Option<AddressFiltering>,
) -> Result<Arc<JsonRpcCachedProvider>, RetryClientError> {
    let mut header = HeaderMap::new();
    header.insert(
        "X-SHADOW-API-KEY",
        public_read_env_value("RINDEXER_PHANTOM_API_KEY")
            .unwrap()
            .parse()
            .unwrap(),
    );
    create_client(
        rpc_url,
        chain_id,
        compute_units_per_second,
        max_block_range,
        block_poll_frequency,
        header,
        address_filtering,
    )
    .await
}

static ETHEREUM_PROVIDER: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();
static ETHEREUM_PROVIDER_ETHCALL: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();

static ARBITRUM_PROVIDER: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();
static ARBITRUM_PROVIDER_ETHCALL: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();

static OPTIMISM_PROVIDER: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();
static OPTIMISM_PROVIDER_ETHCALL: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();

static POLYGON_PROVIDER: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();
static POLYGON_PROVIDER_ETHCALL: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();

static AVALANCHE_PROVIDER: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();
static AVALANCHE_PROVIDER_ETHCALL: OnceCell<Arc<JsonRpcCachedProvider>> = OnceCell::const_new();

pub async fn get_ethereum_provider_cache() -> Arc<JsonRpcCachedProvider> {
    ETHEREUM_PROVIDER
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://eth.rpc.hypersync.xyz")
                    .unwrap_or("https://eth.rpc.hypersync.xyz".to_string()),
                1,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_ethereum_provider_ethcall_cache() -> Arc<JsonRpcCachedProvider> {
    ETHEREUM_PROVIDER_ETHCALL
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://eth.llamarpc.com")
                    .unwrap_or("https://eth.llamarpc.com".to_string()),
                1,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_ethereum_provider() -> Arc<RindexerProvider> {
    get_ethereum_provider_cache().await.get_inner_provider()
}

pub async fn get_ethereum_provider_ethcall() -> Arc<RindexerProvider> {
    get_ethereum_provider_ethcall_cache()
        .await
        .get_inner_provider()
}

pub async fn get_arbitrum_provider_cache() -> Arc<JsonRpcCachedProvider> {
    ARBITRUM_PROVIDER
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://arbitrum.rpc.hypersync.xyz")
                    .unwrap_or("https://arbitrum.rpc.hypersync.xyz".to_string()),
                42161,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_arbitrum_provider_ethcall_cache() -> Arc<JsonRpcCachedProvider> {
    ARBITRUM_PROVIDER_ETHCALL
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://arbitrum.llamarpc.com")
                    .unwrap_or("https://arbitrum.llamarpc.com".to_string()),
                42161,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_arbitrum_provider() -> Arc<RindexerProvider> {
    get_arbitrum_provider_cache().await.get_inner_provider()
}

pub async fn get_arbitrum_provider_ethcall() -> Arc<RindexerProvider> {
    get_arbitrum_provider_ethcall_cache()
        .await
        .get_inner_provider()
}

pub async fn get_optimism_provider_cache() -> Arc<JsonRpcCachedProvider> {
    OPTIMISM_PROVIDER
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://optimism.rpc.hypersync.xyz")
                    .unwrap_or("https://optimism.rpc.hypersync.xyz".to_string()),
                10,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_optimism_provider_ethcall_cache() -> Arc<JsonRpcCachedProvider> {
    OPTIMISM_PROVIDER_ETHCALL
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://optimism.llamarpc.com")
                    .unwrap_or("https://optimism.llamarpc.com".to_string()),
                10,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_optimism_provider() -> Arc<RindexerProvider> {
    get_optimism_provider_cache().await.get_inner_provider()
}

pub async fn get_optimism_provider_ethcall() -> Arc<RindexerProvider> {
    get_optimism_provider_ethcall_cache()
        .await
        .get_inner_provider()
}

pub async fn get_polygon_provider_cache() -> Arc<JsonRpcCachedProvider> {
    POLYGON_PROVIDER
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://polygon.rpc.hypersync.xyz/")
                    .unwrap_or("https://polygon.rpc.hypersync.xyz/".to_string()),
                137,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_polygon_provider_ethcall_cache() -> Arc<JsonRpcCachedProvider> {
    POLYGON_PROVIDER_ETHCALL
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://polygon.llamarpc.com")
                    .unwrap_or("https://polygon.llamarpc.com".to_string()),
                137,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_polygon_provider() -> Arc<RindexerProvider> {
    get_polygon_provider_cache().await.get_inner_provider()
}

pub async fn get_polygon_provider_ethcall() -> Arc<RindexerProvider> {
    get_polygon_provider_ethcall_cache()
        .await
        .get_inner_provider()
}

pub async fn get_avalanche_provider_cache() -> Arc<JsonRpcCachedProvider> {
    AVALANCHE_PROVIDER
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://avalanche.rpc.hypersync.xyz/")
                    .unwrap_or("https://avalanche.rpc.hypersync.xyz/".to_string()),
                43114,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_avalanche_provider_ethcall_cache() -> Arc<JsonRpcCachedProvider> {
    AVALANCHE_PROVIDER_ETHCALL
        .get_or_init(|| async {
            create_client(
                &public_read_env_value("https://avalanche.llamarpc.com")
                    .unwrap_or("https://avalanche.llamarpc.com".to_string()),
                43114,
                None,
                None,
                Some(BlockPollFrequency::RpcOptimized),
                HeaderMap::new(),
                None,
            )
            .await
            .expect("Error creating provider")
        })
        .await
        .clone()
}

pub async fn get_avalanche_provider() -> Arc<RindexerProvider> {
    get_avalanche_provider_cache().await.get_inner_provider()
}

pub async fn get_avalanche_provider_ethcall() -> Arc<RindexerProvider> {
    get_avalanche_provider_ethcall_cache()
        .await
        .get_inner_provider()
}

pub async fn get_provider_cache_for_network(network: &str) -> Arc<JsonRpcCachedProvider> {
    if network == "ethereum" {
        return get_ethereum_provider_cache().await;
    }
    
    if network == "ethereum-ethcall" {
        return get_ethereum_provider_ethcall_cache().await;
    }

    if network == "arbitrum" {
        return get_arbitrum_provider_cache().await;
    }
    
    if network == "arbitrum-ethcall" {
        return get_arbitrum_provider_ethcall_cache().await;
    }

    if network == "optimism" {
        return get_optimism_provider_cache().await;
    }
    
    if network == "optimism-ethcall" {
        return get_optimism_provider_ethcall_cache().await;
    }

    if network == "polygon" {
        return get_polygon_provider_cache().await;
    }
    
    if network == "polygon-ethcall" {
        return get_polygon_provider_ethcall_cache().await;
    }

    if network == "avalanche" {
        return get_avalanche_provider_cache().await;
    }
    
    if network == "avalanche-ethcall" {
        return get_avalanche_provider_ethcall_cache().await;
    }
    panic!("Network not supported")
}
