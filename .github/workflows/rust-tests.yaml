name: Rust Tests

on:
  pull_request:
  push:
    branches:
      - "**"

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test-coverage:
    name: Build, Test & Coverage
    permissions:
      checks: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Show initial disk space
        run: df -h

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview

      - name: Install and configure sccache (optional)
        continue-on-error: true
        id: sccache
        uses: mozilla-actions/sccache-action@v0.0.3
        
      - name: Configure Rust wrapper
        run: |
          if [ "${{ steps.sccache.outcome }}" == "success" ]; then
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
            echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
            echo "::notice::Using sccache for compilation caching"
          else
            echo "::warning::sccache setup failed, continuing without cache"
          fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install latest cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov,cargo-nextest

      - name: Build
        run: |
          # Try building with sccache if available
          if ! cargo build --verbose; then
            echo "::warning::Build failed with sccache, retrying without cache"
            unset RUSTC_WRAPPER
            unset SCCACHE_GHA_ENABLED
            cargo build --verbose
          fi
          # Clean up unnecessary build artifacts to save space
          rm -rf target/debug/deps/*.d
          rm -rf target/debug/incremental

      - name: Run tests with coverage
        env:
          ARBISCAN_API_KEY: ${{ secrets.ARBISCAN_API_KEY }}
          ARBITRUM_NODE_URL: ${{ secrets.ARBITRUM_NODE_URL }}
          AVALANCHE_NODE_URL: ${{ secrets.AVALANCHE_NODE_URL }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          ETHEREUM_NODE_URL: ${{ secrets.ETHEREUM_NODE_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          OPTIMISM_NODE_URL: ${{ secrets.OPTIMISM_NODE_URL }}
          OPTIMISTIC_SCAN_API_KEY: ${{ secrets.OPTIMISTIC_SCAN_API_KEY }}
          POLYGON_NODE_URL: ${{ secrets.POLYGON_NODE_URL }}
        run: |
          # Try running tests with sccache if available
          if ! cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info; then
            echo "::warning::Tests failed with sccache, retrying without cache"
            unset RUSTC_WRAPPER
            unset SCCACHE_GHA_ENABLED
            cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./lcov.info
          flags: unittests
          name: codecov-rust
          verbose: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: lcov.info

      - name: Show final disk space
        if: always()
        run: df -h
