name: Rust Tests

on:
  pull_request:
    paths:
      - "apps/discourse/**"
      - "apps/mapper/**"
      - "apps/rindexer/**"
      - "libs/rust/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "rust-toolchain.toml"
      - ".cargo/**"
      - ".github/workflows/rust-tests.yaml"
  push:
    branches:
      - "**"
    paths:
      - "apps/discourse/**"
      - "apps/mapper/**"
      - "apps/rindexer/**"
      - "libs/rust/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "rust-toolchain.toml"
      - ".cargo/**"
      - ".github/workflows/rust-tests.yaml"

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test-coverage:
    name: Build, Test & Coverage
    permissions:
      checks: write
      contents: read
    runs-on: [self-hosted, linux, sibiu] # Use Sibiu runners with 16 cores/32GB RAM
    steps:
      - uses: actions/checkout@v4

      # Skip GitHub cache since we have persistent storage on self-hosted runners
      - name: Ensure cargo directories exist
        run: |
          mkdir -p ~/.cargo/registry/index
          mkdir -p ~/.cargo/registry/cache
          mkdir -p ~/.cargo/git/db
          mkdir -p ~/.rustup

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang lld git

      - name: Install ONNX Runtime
        run: |
          # Download and install ONNX Runtime
          wget https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-1.22.0.tgz
          sudo tar -xzf onnxruntime-linux-x64-1.22.0.tgz -C /usr/local
          sudo ln -sf /usr/local/onnxruntime-linux-x64-1.22.0/lib/* /usr/local/lib/
          sudo ldconfig
          rm onnxruntime-linux-x64-1.22.0.tgz

      - name: Clean up existing Rust installation
        run: |
          # Remove any existing rustup settings that might be corrupted
          rm -f ~/.rustup/settings.toml || true
          # Ensure rustup is available in PATH
          export PATH="$HOME/.cargo/bin:$PATH"
          # Uninstall existing toolchains if rustup is available
          if command -v rustup &> /dev/null; then
            rustup toolchain uninstall stable || true
          fi

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustc,cargo,llvm-tools-preview

      - name: Install latest cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov,cargo-nextest

      - name: Build with optimizations
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
          CARGO_PROFILE_DEV_INCREMENTAL: true
          CARGO_PROFILE_DEV_CODEGEN_UNITS: 256
        run: |
          # Use faster linker and parallel jobs
          export RUSTFLAGS="-C link-arg=-fuse-ld=lld"
          cargo build --verbose --jobs $(nproc)
          # Clean up unnecessary build artifacts to save space
          rm -rf target/debug/deps/*.d
          rm -rf target/debug/incremental

      - name: Run tests with coverage
        env:
          ARBISCAN_API_KEY: ${{ secrets.ARBISCAN_API_KEY }}
          ARBITRUM_NODE_URL: ${{ secrets.ARBITRUM_NODE_URL }}
          ARBITRUM_HYPERSYNC_NODE_URL: ${{ secrets.ARBITRUM_HYPERSYNC_NODE_URL }}
          AVALANCHE_NODE_URL: ${{ secrets.AVALANCHE_NODE_URL }}
          AVALANCHE_HYPERSYNC_NODE_URL: ${{ secrets.AVALANCHE_HYPERSYNC_NODE_URL }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          ETHEREUM_NODE_URL: ${{ secrets.ETHEREUM_NODE_URL }}
          ETHEREUM_HYPERSYNC_NODE_URL: ${{ secrets.ETHEREUM_HYPERSYNC_NODE_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          OPTIMISM_NODE_URL: ${{ secrets.OPTIMISM_NODE_URL }}
          OPTIMISM_HYPERSYNC_NODE_URL: ${{ secrets.OPTIMISM_HYPERSYNC_NODE_URL }}
          OPTIMISTIC_SCAN_API_KEY: ${{ secrets.OPTIMISTIC_SCAN_API_KEY }}
          POLYGON_NODE_URL: ${{ secrets.POLYGON_NODE_URL }}
          POLYGON_HYPERSYNC_NODE_URL: ${{ secrets.POLYGON_HYPERSYNC_NODE_URL }}
          # Build optimization environment variables
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
          CARGO_PROFILE_DEV_INCREMENTAL: true
          CARGO_PROFILE_DEV_CODEGEN_UNITS: 256
          RUSTFLAGS: "-C link-arg=-fuse-ld=lld"
        run: |
          # Run tests with parallel execution using all available cores
          cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info --jobs $(nproc)

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./lcov.info
          flags: rust
          name: codecov-rust
          verbose: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: lcov.info

      - name: Show final disk space
        if: always()
        run: df -h
