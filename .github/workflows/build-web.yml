name: Build and Push Web

on:
  push:
    branches:
      - "**" # Trigger on all branches
    paths:
      - "apps/web/**"
      - "libs/ts/**"
      - "package.json"
      - "yarn.lock"
      - "turbo.json"
      - ".github/workflows/build-web.yml"
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build even without changes"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web

jobs:
  build:
    name: Build and Push Docker Image
    # Use only Sibiu runners (dc1 or dc2) with 16 cores/32GB RAM
    # GitHub will pick any available runner matching these labels
    runs-on: [self-hosted, linux, sibiu]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Skip GitHub cache since we have persistent storage on self-hosted runners
      - name: Ensure yarn cache directory exists
        run: |
          mkdir -p ~/.cache/yarn
          mkdir -p ~/.npm

      - name: Ensure buildx cache directory exists
        run: |
          sudo mkdir -p /var/cache/buildx/web
          sudo chown -R runner:runner /var/cache/buildx || true

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          buildkitd-flags: --debug
          install: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch name
            type=ref,event=branch
            # Tag name
            type=ref,event=tag
            # PR number
            type=ref,event=pr
            # SHA short
            type=sha,prefix={{branch}}-
            # Latest only on main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Branch with timestamp
            type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          # Use only local cache for self-hosted runners (no registry cache)
          cache-from: type=local,src=/var/cache/buildx/web
          cache-to: type=local,dest=/var/cache/buildx/web,mode=max
          build-args: |
            NODE_VERSION=20
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}-${{ github.sha }}
            BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}

      - name: Generate deployment webhook payload
        id: webhook
        if: success()
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          IMAGE_TAG="${BRANCH_NAME}-$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Update deployment metadata in Consul
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "📦 New image available: ${{ steps.webhook.outputs.image }}"
          echo "🏷️  Tag: ${{ steps.webhook.outputs.tag }}"

          # Create deployment metadata
          DEPLOYMENT_JSON=$(cat <<EOF
          {
            "tag": "${{ steps.webhook.outputs.tag }}",
            "image": "${{ steps.webhook.outputs.image }}",
            "branch": "main",
            "sha": "${{ github.sha }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_message": $(echo '${{ github.event.head_commit.message }}' | jq -Rs .),
            "author": "${{ github.actor }}",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          )

          echo "📤 Updating Consul KV with deployment metadata..."

          # Update Consul KV with retry logic
          CONSUL_SERVERS=("consul-nomad-sib-01:8500" "consul-nomad-sib-03:8500" "consul-nomad-fsn-01:8500")
          UPDATED=false

          for server in "${CONSUL_SERVERS[@]}"; do
            echo "Trying Consul server: ${server}"
            
            # Try up to 3 times per server with exponential backoff
            for attempt in 1 2 3; do
              if curl -f -X PUT "http://${server}/v1/kv/web/deployment/main" \
                -H "Content-Type: application/json" \
                --data "$DEPLOYMENT_JSON" \
                --connect-timeout 5 \
                --max-time 10; then
                echo "✓ Successfully updated Consul KV via ${server}"
                UPDATED=true
                break 2
              else
                echo "Attempt ${attempt}/3 failed for ${server}"
                [ $attempt -lt 3 ] && sleep $((attempt * 2))
              fi
            done
          done

          if [ "$UPDATED" = false ]; then
            echo "❌ ERROR: Failed to update Consul KV on all servers!"
            echo "Deployment metadata was not saved. Nomad will not receive the update."
            exit 1
          fi

          echo "✅ Deployment metadata updated successfully"
          echo "ℹ️  Nomad will detect the change via Consul template and restart with the new image"

      - name: Log build information
        if: success() && github.event_name == 'push' && github.ref != 'refs/heads/main'
        run: |
          echo "Built image for branch ${{ steps.webhook.outputs.branch }}: ${{ steps.webhook.outputs.image }}"
          echo "This image is available in ghcr.io but will not be automatically deployed."
          echo "Only pushes to the main branch trigger automatic deployments to Nomad."

  # Comprehensive runner cleanup after all jobs
  runner-cleanup:
    name: Clean Runner Environment
    needs: [build]
    if: always() # Always run cleanup, even if previous jobs failed
    uses: ./.github/workflows/runner-cleanup.yml
    with:
      aggressive: false # Use normal cleanup
      keep_workspace: false # Clean the workspace
      package_name: "proposalsapp/web" # For registry cleanup
      registry_cleanup: true # Enable registry cleanup
    permissions:
      packages: write # Required for registry cleanup
