name: Runner Cleanup

on:
  workflow_call:
    inputs:
      aggressive:
        description: "Whether to perform aggressive cleanup (removes more cache)"
        required: false
        default: false
        type: boolean
      keep_workspace:
        description: "Whether to keep the workspace files"
        required: false
        default: false
        type: boolean
      package_name:
        description: "Package name for registry cleanup (e.g., 'proposalsapp/web')"
        required: false
        default: ""
        type: string
      registry_cleanup:
        description: "Whether to perform registry cleanup"
        required: false
        default: true
        type: boolean

jobs:
  cleanup:
    name: Clean Runner Environment
    runs-on: [self-hosted, linux, sibiu]
    if: always()
    
    steps:
      - name: Disk Usage Before Cleanup
        run: |
          echo "=== Disk usage before cleanup ==="
          df -h
          echo ""
          echo "=== Docker disk usage ==="
          docker system df || true
          echo ""
          echo "=== Buildx cache usage ==="
          docker buildx du || true
          echo ""
          echo "=== Large directories in runner workspace ==="
          du -sh ${{ github.workspace }}/* 2>/dev/null | sort -hr | head -10 || true

      - name: Clean Docker System
        run: |
          echo "=== Cleaning Docker system ==="
          
          # Stop all running containers
          docker stop $(docker ps -q) 2>/dev/null || true
          
          # Remove all stopped containers
          docker rm $(docker ps -aq) 2>/dev/null || true
          
          # Remove unused images
          if [[ "${{ inputs.aggressive }}" == "true" ]]; then
            echo "Aggressive cleanup: removing all images except base ones"
            docker image prune -a --force --filter "until=30m" || true
          else
            echo "Normal cleanup: removing images older than 2h"
            docker image prune -a --force --filter "until=2h" || true
          fi
          
          # Clean build cache
          if [[ "${{ inputs.aggressive }}" == "true" ]]; then
            echo "Aggressive cleanup: removing all build cache"
            docker buildx prune --all --force || true
          else
            echo "Normal cleanup: removing build cache older than 6h"
            docker buildx prune --force --filter "until=6h" || true
          fi
          
          # Remove unused volumes
          docker volume prune -f || true
          
          # Remove unused networks
          docker network prune -f || true
          
          # Final system prune
          docker system prune --force --filter "until=2h" || true

      - name: Clean Buildx Builders
        run: |
          echo "=== Cleaning buildx builders ==="
          # List all builders
          docker buildx ls || true
          
          # Remove unused builders (keep default)
          for builder in $(docker buildx ls | grep -v 'default' | grep -v 'NAME' | awk '{print $1}' | grep -v '^$'); do
            echo "Checking builder: $builder"
            # Check if builder is in use
            if ! docker buildx inspect "$builder" 2>&1 | grep -q "Status: running"; then
              echo "Removing unused builder: $builder"
              docker buildx rm "$builder" || true
            fi
          done

      - name: Clean Build Cache Directories
        run: |
          echo "=== Cleaning build cache directories ==="
          
          # Clean buildx cache directories
          CACHE_DIRS="/var/cache/buildx"
          if [ -d "$CACHE_DIRS" ]; then
            for dir in $CACHE_DIRS/*; do
              if [ -d "$dir" ]; then
                CACHE_SIZE=$(du -sb "$dir" 2>/dev/null | cut -f1 || echo 0)
                MAX_SIZE=$((10 * 1024 * 1024 * 1024)) # 10GB per cache
                
                if [ "$CACHE_SIZE" -gt "$MAX_SIZE" ]; then
                  echo "Cache $dir exceeds 10GB ($CACHE_SIZE bytes), cleaning..."
                  # Keep only recent cache entries
                  find "$dir" -type f -atime +1 -delete 2>/dev/null || true
                  find "$dir" -type d -empty -delete 2>/dev/null || true
                fi
              fi
            done
          fi
          
          # Clean npm/yarn caches if they're too large
          NPM_CACHE="$HOME/.npm"
          YARN_CACHE="$HOME/.cache/yarn"
          
          for cache_dir in "$NPM_CACHE" "$YARN_CACHE"; do
            if [ -d "$cache_dir" ]; then
              CACHE_SIZE=$(du -sb "$cache_dir" 2>/dev/null | cut -f1 || echo 0)
              MAX_SIZE=$((5 * 1024 * 1024 * 1024)) # 5GB
              
              if [ "$CACHE_SIZE" -gt "$MAX_SIZE" ]; then
                echo "Cache $cache_dir exceeds 5GB ($CACHE_SIZE bytes), cleaning..."
                if [[ "$cache_dir" == *"npm"* ]]; then
                  npm cache clean --force || true
                elif [[ "$cache_dir" == *"yarn"* ]]; then
                  yarn cache clean || true
                fi
              fi
            fi
          done
          
          # Clean cargo cache if too large
          CARGO_CACHE="$HOME/.cargo"
          if [ -d "$CARGO_CACHE" ]; then
            CACHE_SIZE=$(du -sb "$CARGO_CACHE" 2>/dev/null | cut -f1 || echo 0)
            MAX_SIZE=$((10 * 1024 * 1024 * 1024)) # 10GB
            
            if [ "$CACHE_SIZE" -gt "$MAX_SIZE" ]; then
              echo "Cargo cache exceeds 10GB ($CACHE_SIZE bytes), cleaning old artifacts..."
              # Remove old registry caches
              find "$CARGO_CACHE/registry/cache" -type f -atime +7 -delete 2>/dev/null || true
              find "$CARGO_CACHE/registry/src" -type f -atime +7 -delete 2>/dev/null || true
              # Clean git checkouts older than 30 days
              find "$CARGO_CACHE/git/checkouts" -type d -atime +30 -exec rm -rf {} + 2>/dev/null || true
            fi
          fi

      - name: Clean Runner Workspace
        if: ${{ inputs.keep_workspace != 'true' }}
        run: |
          echo "=== Cleaning runner workspace ==="
          cd ${{ github.workspace }}
          
          # First, try to clean git to avoid permission issues
          git clean -ffdx || true
          
          # Remove all files including hidden ones
          # Using find to handle files with special permissions
          find . -mindepth 1 -delete 2>/dev/null || {
            # If find fails, try with sudo (for files created by Docker)
            echo "Regular cleanup failed, trying with elevated permissions..."
            sudo find . -mindepth 1 -delete 2>/dev/null || {
              # Last resort: change ownership and try again
              echo "Elevated cleanup failed, changing ownership..."
              sudo chown -R $(whoami):$(whoami) . || true
              find . -mindepth 1 -delete || true
            }
          }

      - name: Clean Temporary Files
        run: |
          echo "=== Cleaning temporary files ==="
          # Clean system temp files older than 1 day
          find /tmp -type f -atime +1 -delete 2>/dev/null || true
          find /var/tmp -type f -atime +1 -delete 2>/dev/null || true
          
          # Clean runner temp directory
          if [ -d "$RUNNER_TEMP" ]; then
            rm -rf "$RUNNER_TEMP"/* 2>/dev/null || true
          fi

      - name: Disk Usage After Cleanup
        if: always()
        run: |
          echo "=== Disk usage after cleanup ==="
          df -h
          echo ""
          echo "=== Docker disk usage after cleanup ==="
          docker system df || true
          echo ""
          echo "=== Buildx cache usage after cleanup ==="
          docker buildx du || true
          echo ""
          echo "=== Space reclaimed ==="
          # This is approximate, but gives an idea
          echo "Check the before/after df -h output above for actual space reclaimed"

      - name: Runner Health Check
        if: always()
        run: |
          echo "=== Runner health check ==="
          
          # Check available disk space
          AVAILABLE=$(df / | tail -1 | awk '{print $4}')
          THRESHOLD=$((20 * 1024 * 1024)) # 20GB in KB
          
          if [ "$AVAILABLE" -lt "$THRESHOLD" ]; then
            echo "⚠️ WARNING: Low disk space! Available: $(df -h / | tail -1 | awk '{print $4}')"
            echo "Consider more aggressive cleanup or manual intervention"
          else
            echo "✅ Disk space OK: $(df -h / | tail -1 | awk '{print $4}') available"
          fi
          
          # Check if Docker is responsive
          if docker ps >/dev/null 2>&1; then
            echo "✅ Docker daemon is responsive"
          else
            echo "❌ Docker daemon is not responsive!"
          fi
          
          # Check buildx
          if docker buildx version >/dev/null 2>&1; then
            echo "✅ Docker buildx is available"
          else
            echo "⚠️ Docker buildx might need attention"
          fi

  # Registry cleanup job - runs independently
  registry-cleanup:
    name: Clean Container Registry
    runs-on: [self-hosted, linux, sibiu]
    if: ${{ always() && inputs.registry_cleanup && inputs.package_name != '' }}
    permissions:
      packages: write
    continue-on-error: true # Don't fail the workflow if cleanup fails
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ inputs.package_name }}
          package-type: "container"
          min-versions-to-keep: 10
          delete-only-untagged-versions: "false"
          # Keep last 5 versions per branch for main, master, develop
          ignore-versions: "^(main|master|develop)-.*"
          # Delete versions older than 30 days for other branches
          delete-only-pre-release-versions: "false"
          token: ${{ github.token }}
        continue-on-error: true # Continue even if package doesn't exist yet
      
      - name: Log registry cleanup result
        if: always()
        run: |
          if [ "${{ steps.delete-old-versions.outcome }}" = "success" ]; then
            echo "✅ Successfully cleaned up old container images for ${{ inputs.package_name }}"
          else
            echo "⚠️ Registry cleanup completed with warnings or was skipped"
          fi