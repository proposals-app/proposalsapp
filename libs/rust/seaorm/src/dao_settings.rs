//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "dao_settings"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub dao_id: String,
    pub picture: String,
    pub background_color: String,
    pub quorum_warning_email_support: i8,
    pub twitter_account: Option<Json>,
    pub hot: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    DaoId,
    Picture,
    BackgroundColor,
    QuorumWarningEmailSupport,
    TwitterAccount,
    Hot,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Dao,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(Some(191u32)).def(),
            Self::DaoId => ColumnType::String(Some(191u32)).def().unique(),
            Self::Picture => ColumnType::String(Some(191u32)).def(),
            Self::BackgroundColor => ColumnType::String(Some(191u32)).def(),
            Self::QuorumWarningEmailSupport => ColumnType::TinyInteger.def(),
            Self::TwitterAccount => ColumnType::Json.def().null(),
            Self::Hot => ColumnType::TinyInteger.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Dao => Entity::belongs_to(super::dao::Entity)
                .from(Column::DaoId)
                .to(super::dao::Column::Id)
                .into(),
        }
    }
}

impl Related<super::dao::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dao.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
