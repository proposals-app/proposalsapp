//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::NotificationDispatchedStateEnum;
use super::sea_orm_active_enums::NotificationTypeEnumV2;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "notification"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: Uuid,
    pub user_id: Option<Uuid>,
    pub proposal_id: Option<Uuid>,
    pub dispatchstatus: NotificationDispatchedStateEnum,
    pub submitted_at: DateTime,
    pub r#type: Option<NotificationTypeEnumV2>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    UserId,
    ProposalId,
    Dispatchstatus,
    SubmittedAt,
    Type,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Proposal,
    User,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::UserId => ColumnType::Uuid.def().null(),
            Self::ProposalId => ColumnType::Uuid.def().null(),
            Self::Dispatchstatus => NotificationDispatchedStateEnum::db_type().def(),
            Self::SubmittedAt => ColumnType::DateTime.def(),
            Self::Type => NotificationTypeEnumV2::db_type().def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Proposal => Entity::belongs_to(super::proposal::Entity)
                .from(Column::ProposalId)
                .to(super::proposal::Column::Id)
                .into(),
            Self::User => Entity::belongs_to(super::user::Entity)
                .from(Column::UserId)
                .to(super::user::Column::Id)
                .into(),
        }
    }
}

impl Related<super::proposal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Proposal.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
