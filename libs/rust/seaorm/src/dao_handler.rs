//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::DaoHandlerEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "dao_handler"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: Uuid,
    pub handler_type: DaoHandlerEnum,
    pub decoder: Json,
    pub governance_portal: String,
    pub refresh_enabled: bool,
    pub proposals_refresh_speed: i32,
    pub votes_refresh_speed: i32,
    pub proposals_index: i32,
    pub votes_index: i32,
    pub dao_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    HandlerType,
    Decoder,
    GovernancePortal,
    RefreshEnabled,
    ProposalsRefreshSpeed,
    VotesRefreshSpeed,
    ProposalsIndex,
    VotesIndex,
    DaoId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Dao,
    Proposal,
    Vote,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::HandlerType => DaoHandlerEnum::db_type().def(),
            Self::Decoder => ColumnType::Json.def(),
            Self::GovernancePortal => ColumnType::Text.def(),
            Self::RefreshEnabled => ColumnType::Boolean.def(),
            Self::ProposalsRefreshSpeed => ColumnType::Integer.def(),
            Self::VotesRefreshSpeed => ColumnType::Integer.def(),
            Self::ProposalsIndex => ColumnType::Integer.def(),
            Self::VotesIndex => ColumnType::Integer.def(),
            Self::DaoId => ColumnType::Uuid.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Dao => Entity::belongs_to(super::dao::Entity)
                .from(Column::DaoId)
                .to(super::dao::Column::Id)
                .into(),
            Self::Proposal => Entity::has_many(super::proposal::Entity).into(),
            Self::Vote => Entity::has_many(super::vote::Entity).into(),
        }
    }
}

impl Related<super::dao::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dao.def()
    }
}

impl Related<super::proposal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Proposal.def()
    }
}

impl Related<super::vote::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vote.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
