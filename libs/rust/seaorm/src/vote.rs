//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "vote"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub index_created: i64,
    pub voter_address: String,
    pub choice: Json,
    pub voting_power: f64,
    pub reason: Option<String>,
    pub proposal_external_id: String,
    pub block_created: Option<i64>,
    pub time_created: Option<DateTime>,
    pub vp_state: Option<String>,
    pub proposal_id: String,
    pub dao_id: String,
    pub dao_handler_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    IndexCreated,
    VoterAddress,
    Choice,
    VotingPower,
    Reason,
    ProposalExternalId,
    BlockCreated,
    TimeCreated,
    VpState,
    ProposalId,
    DaoId,
    DaoHandlerId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Dao,
    DaoHandler,
    Proposal,
    Voter,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(Some(191u32)).def(),
            Self::IndexCreated => ColumnType::BigInteger.def(),
            Self::VoterAddress => ColumnType::String(Some(191u32)).def(),
            Self::Choice => ColumnType::Json.def(),
            Self::VotingPower => ColumnType::Double.def(),
            Self::Reason => ColumnType::custom("LONGTEXT").def().null(),
            Self::ProposalExternalId => ColumnType::String(Some(191u32)).def(),
            Self::BlockCreated => ColumnType::BigInteger.def().null(),
            Self::TimeCreated => ColumnType::DateTime.def().null(),
            Self::VpState => ColumnType::String(Some(191u32)).def().null(),
            Self::ProposalId => ColumnType::String(Some(191u32)).def(),
            Self::DaoId => ColumnType::String(Some(191u32)).def(),
            Self::DaoHandlerId => ColumnType::String(Some(191u32)).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Dao => Entity::belongs_to(super::dao::Entity)
                .from(Column::DaoId)
                .to(super::dao::Column::Id)
                .into(),
            Self::DaoHandler => Entity::belongs_to(super::dao_handler::Entity)
                .from(Column::DaoHandlerId)
                .to(super::dao_handler::Column::Id)
                .into(),
            Self::Proposal => Entity::belongs_to(super::proposal::Entity)
                .from(Column::ProposalId)
                .to(super::proposal::Column::Id)
                .into(),
            Self::Voter => Entity::belongs_to(super::voter::Entity)
                .from(Column::VoterAddress)
                .to(super::voter::Column::Address)
                .into(),
        }
    }
}

impl Related<super::dao::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dao.def()
    }
}

impl Related<super::dao_handler::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DaoHandler.def()
    }
}

impl Related<super::proposal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Proposal.def()
    }
}

impl Related<super::voter::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Voter.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
