//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "user_settings"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub user_id: String,
    pub email_daily_bulletin: i8,
    pub empty_daily_bulletin: i8,
    pub email_quorum_warning: i8,
    pub discord_notifications: i8,
    pub discord_reminders: i8,
    pub discord_includevotes: i8,
    pub discord_webhook: String,
    pub telegram_notifications: i8,
    pub telegram_reminders: i8,
    pub telegram_include_votes: i8,
    pub telegram_chat_id: String,
    pub telegram_chat_title: String,
    pub slack_notifications: i8,
    pub slack_reminders: i8,
    pub slack_includevotes: i8,
    pub slack_webhook: String,
    pub slack_channelname: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    UserId,
    EmailDailyBulletin,
    EmptyDailyBulletin,
    EmailQuorumWarning,
    DiscordNotifications,
    DiscordReminders,
    DiscordIncludevotes,
    DiscordWebhook,
    TelegramNotifications,
    TelegramReminders,
    TelegramIncludeVotes,
    TelegramChatId,
    TelegramChatTitle,
    SlackNotifications,
    SlackReminders,
    SlackIncludevotes,
    SlackWebhook,
    SlackChannelname,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    User,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(Some(191u32)).def(),
            Self::UserId => ColumnType::String(Some(191u32)).def().unique(),
            Self::EmailDailyBulletin => ColumnType::TinyInteger.def(),
            Self::EmptyDailyBulletin => ColumnType::TinyInteger.def(),
            Self::EmailQuorumWarning => ColumnType::TinyInteger.def(),
            Self::DiscordNotifications => ColumnType::TinyInteger.def(),
            Self::DiscordReminders => ColumnType::TinyInteger.def(),
            Self::DiscordIncludevotes => ColumnType::TinyInteger.def(),
            Self::DiscordWebhook => ColumnType::String(Some(191u32)).def(),
            Self::TelegramNotifications => ColumnType::TinyInteger.def(),
            Self::TelegramReminders => ColumnType::TinyInteger.def(),
            Self::TelegramIncludeVotes => ColumnType::TinyInteger.def(),
            Self::TelegramChatId => ColumnType::String(Some(191u32)).def(),
            Self::TelegramChatTitle => ColumnType::String(Some(191u32)).def(),
            Self::SlackNotifications => ColumnType::TinyInteger.def(),
            Self::SlackReminders => ColumnType::TinyInteger.def(),
            Self::SlackIncludevotes => ColumnType::TinyInteger.def(),
            Self::SlackWebhook => ColumnType::String(Some(191u32)).def(),
            Self::SlackChannelname => ColumnType::String(Some(191u32)).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::User => Entity::belongs_to(super::user::Entity)
                .from(Column::UserId)
                .to(super::user::Column::Id)
                .into(),
        }
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
