//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "user"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub name: String,
    pub email: String,
    pub email_verified: bool,
    pub image: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub email_settings_new_proposals: bool,
    pub email_settings_new_discussions: bool,
    pub is_onboarded: bool,
    pub email_settings_ending_proposals: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Name,
    Email,
    EmailVerified,
    Image,
    CreatedAt,
    UpdatedAt,
    EmailSettingsNewProposals,
    EmailSettingsNewDiscussions,
    IsOnboarded,
    EmailSettingsEndingProposals,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Account,
    Session,
    UserNotification,
    UserProposalGroupLastRead,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Text.def(),
            Self::Name => ColumnType::Text.def(),
            Self::Email => ColumnType::Text.def().unique(),
            Self::EmailVerified => ColumnType::Boolean.def(),
            Self::Image => ColumnType::Text.def().null(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
            Self::EmailSettingsNewProposals => ColumnType::Boolean.def(),
            Self::EmailSettingsNewDiscussions => ColumnType::Boolean.def(),
            Self::IsOnboarded => ColumnType::Boolean.def(),
            Self::EmailSettingsEndingProposals => ColumnType::Boolean.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Account => Entity::has_many(super::account::Entity).into(),
            Self::Session => Entity::has_many(super::session::Entity).into(),
            Self::UserNotification => Entity::has_many(super::user_notification::Entity).into(),
            Self::UserProposalGroupLastRead => {
                Entity::has_many(super::user_proposal_group_last_read::Entity).into()
            }
        }
    }
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}

impl Related<super::user_notification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserNotification.def()
    }
}

impl Related<super::user_proposal_group_last_read::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserProposalGroupLastRead.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
