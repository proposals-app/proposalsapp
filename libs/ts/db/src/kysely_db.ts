/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export enum ProposalState {
  ACTIVE = "ACTIVE",
  CANCELED = "CANCELED",
  DEFEATED = "DEFEATED",
  EXECUTED = "EXECUTED",
  EXPIRED = "EXPIRED",
  HIDDEN = "HIDDEN",
  PENDING = "PENDING",
  QUEUED = "QUEUED",
  SUCCEEDED = "SUCCEEDED",
  UNKNOWN = "UNKNOWN",
}

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Account {
  accessToken: string | null;
  accessTokenExpiresAt: Timestamp | null;
  accountId: string;
  createdAt: Timestamp;
  id: string;
  idToken: string | null;
  password: string | null;
  providerId: string;
  refreshToken: string | null;
  refreshTokenExpiresAt: Timestamp | null;
  scope: string | null;
  updatedAt: Timestamp;
  userId: string;
}

export interface Dao {
  id: Generated<string>;
  name: string;
  picture: string;
  slug: string;
}

export interface DaoDiscourse {
  daoId: string;
  discourseBaseUrl: string;
  id: Generated<string>;
}

export interface DaoGovernor {
  daoId: string;
  id: Generated<string>;
  name: string;
  portalUrl: string | null;
  type: string;
}

export interface Delegate {
  daoId: string;
  id: Generated<string>;
}

export interface DelegateToDiscourseUser {
  createdAt: Generated<Timestamp>;
  delegateId: string;
  discourseUserId: string;
  id: Generated<string>;
  periodEnd: Timestamp;
  periodStart: Timestamp;
  proof: Json | null;
  verified: Generated<boolean>;
}

export interface DelegateToVoter {
  createdAt: Generated<Timestamp>;
  delegateId: string;
  id: Generated<string>;
  periodEnd: Timestamp;
  periodStart: Timestamp;
  proof: Json | null;
  verified: Generated<boolean>;
  voterId: string;
}

export interface Delegation {
  block: number;
  daoId: string;
  delegate: string;
  delegator: string;
  id: Generated<string>;
  timestamp: Generated<Timestamp>;
  txid: string | null;
}

export interface DiscourseCategory {
  color: string;
  daoDiscourseId: string;
  description: string | null;
  descriptionText: string | null;
  externalId: number;
  id: Generated<string>;
  name: string;
  postCount: number;
  slug: string;
  textColor: string;
  topicCount: number;
  topicsAllTime: number | null;
  topicsDay: number | null;
  topicsMonth: number | null;
  topicsWeek: number | null;
  topicsYear: number | null;
}

export interface DiscoursePost {
  canViewEditHistory: Generated<boolean>;
  cooked: string | null;
  createdAt: Timestamp;
  daoDiscourseId: string;
  deleted: Generated<boolean>;
  displayUsername: string | null;
  externalId: number;
  flairBgColor: string | null;
  flairColor: string | null;
  flairName: string | null;
  flairUrl: string | null;
  id: Generated<string>;
  incomingLinkCount: number;
  name: string | null;
  postNumber: number;
  postType: number;
  primaryGroupName: string | null;
  quoteCount: number;
  readersCount: number;
  reads: number;
  replyCount: number;
  replyToPostNumber: number | null;
  score: number;
  topicId: number;
  topicSlug: string;
  updatedAt: Timestamp;
  userId: number;
  username: string;
  version: number;
}

export interface DiscoursePostLike {
  createdAt: Timestamp;
  daoDiscourseId: string;
  externalDiscoursePostId: number;
  externalUserId: number;
  id: Generated<string>;
}

export interface DiscoursePostRevision {
  bodyChanges: string;
  cookedBodyAfter: string | null;
  cookedBodyBefore: string | null;
  cookedTitleAfter: string | null;
  cookedTitleBefore: string | null;
  createdAt: Timestamp;
  daoDiscourseId: string;
  discoursePostId: string;
  editReason: string | null;
  externalPostId: number;
  id: Generated<string>;
  titleChanges: string | null;
  username: string;
  version: number;
}

export interface DiscourseTopic {
  archived: boolean;
  bumpedAt: Timestamp;
  categoryId: number;
  closed: boolean;
  createdAt: Timestamp;
  daoDiscourseId: string;
  externalId: number;
  fancyTitle: string;
  id: Generated<string>;
  lastPostedAt: Timestamp;
  likeCount: number;
  pinned: boolean;
  pinnedGlobally: boolean;
  postsCount: number;
  replyCount: number;
  slug: string;
  title: string;
  views: number;
  visible: boolean;
}

export interface DiscourseUser {
  avatarTemplate: string;
  daoDiscourseId: string;
  daysVisited: Int8 | null;
  externalId: number;
  id: Generated<string>;
  likesGiven: Int8 | null;
  likesReceived: Int8 | null;
  name: string | null;
  postCount: Int8 | null;
  postsRead: Int8 | null;
  title: string | null;
  topicCount: Int8 | null;
  topicsEntered: Int8 | null;
  username: string;
}

export interface JobQueue {
  createdAt: Generated<Timestamp>;
  data: Json;
  id: Generated<number>;
  status: Generated<string>;
  type: string;
}

export interface Proposal {
  author: string | null;
  blockCreatedAt: number | null;
  blockEndAt: number | null;
  blockStartAt: number | null;
  body: string;
  choices: Generated<Json>;
  createdAt: Timestamp;
  daoId: string;
  discussionUrl: string | null;
  endAt: Timestamp;
  externalId: string;
  governorId: string;
  id: Generated<string>;
  markedSpam: Generated<boolean>;
  metadata: Json | null;
  name: string;
  proposalState: ProposalState;
  quorum: number;
  startAt: Timestamp;
  txid: string | null;
  url: string;
}

export interface ProposalGroup {
  createdAt: Generated<Timestamp>;
  daoId: string;
  id: Generated<string>;
  items: Generated<Json>;
  name: string;
}

export interface Session {
  createdAt: Timestamp;
  expiresAt: Timestamp;
  id: string;
  ipAddress: string | null;
  token: string;
  updatedAt: Timestamp;
  userAgent: string | null;
  userId: string;
}

export interface User {
  createdAt: Timestamp;
  email: string;
  emailSettingsEndingProposals: Generated<boolean>;
  emailSettingsNewDiscussions: Generated<boolean>;
  emailSettingsNewProposals: Generated<boolean>;
  emailVerified: boolean;
  id: string;
  image: string | null;
  isOnboarded: Generated<boolean>;
  name: string;
  updatedAt: Timestamp;
}

export interface UserNotification {
  daoId: string | null;
  id: Generated<string>;
  sentAt: Generated<Timestamp>;
  targetId: string;
  type: string;
  userId: string;
}

export interface UserProposalGroupLastRead {
  id: Generated<string>;
  lastReadAt: Timestamp | null;
  proposalGroupId: string;
  userId: string;
}

export interface Verification {
  createdAt: Timestamp | null;
  expiresAt: Timestamp;
  id: string;
  identifier: string;
  updatedAt: Timestamp | null;
  value: string;
}

export interface Vote {
  blockCreatedAt: number | null;
  choice: Generated<Json>;
  createdAt: Generated<Timestamp>;
  daoId: string;
  governorId: string;
  id: Generated<string>;
  proposalExternalId: string;
  proposalId: string;
  reason: string | null;
  txid: string | null;
  voterAddress: string;
  votingPower: number;
}

export interface Voter {
  address: string;
  avatar: string | null;
  ens: string | null;
  id: Generated<string>;
  updatedAt: Generated<Timestamp>;
}

export interface VotingPowerLatest {
  block: number;
  daoId: string;
  id: Generated<string>;
  timestamp: Timestamp;
  txid: string | null;
  voter: string;
  votingPower: number;
}

export interface VotingPowerTimeseries {
  block: number;
  daoId: string;
  id: Generated<string>;
  timestamp: Generated<Timestamp>;
  txid: string | null;
  voter: string;
  votingPower: number;
}

export interface DB {
  account: Account;
  dao: Dao;
  daoDiscourse: DaoDiscourse;
  daoGovernor: DaoGovernor;
  delegate: Delegate;
  delegateToDiscourseUser: DelegateToDiscourseUser;
  delegateToVoter: DelegateToVoter;
  delegation: Delegation;
  discourseCategory: DiscourseCategory;
  discoursePost: DiscoursePost;
  discoursePostLike: DiscoursePostLike;
  discoursePostRevision: DiscoursePostRevision;
  discourseTopic: DiscourseTopic;
  discourseUser: DiscourseUser;
  jobQueue: JobQueue;
  proposal: Proposal;
  proposalGroup: ProposalGroup;
  session: Session;
  user: User;
  userNotification: UserNotification;
  userProposalGroupLastRead: UserProposalGroupLastRead;
  verification: Verification;
  vote: Vote;
  voter: Voter;
  votingPowerLatest: VotingPowerLatest;
  votingPowerTimeseries: VotingPowerTimeseries;
}
