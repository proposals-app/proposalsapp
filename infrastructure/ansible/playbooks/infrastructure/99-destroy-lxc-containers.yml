---
- name: Destroy All LXC Containers
  hosts: proxmox_nodes
  gather_facts: false
  vars_prompt:
    - name: confirm_destroy
      prompt: "Are you sure you want to DESTROY all containers? Type 'yes-destroy-all' to confirm"
      private: false

  tasks:
    - name: Abort if not confirmed
      fail:
        msg: "Destruction cancelled. You must type 'yes-destroy-all' to confirm."
      when: confirm_destroy != 'yes-destroy-all'

    - name: Get containers from inventory for this host
      set_fact:
        my_containers: []

    - name: Build container list from inventory
      set_fact:
        my_containers: "{{ my_containers + [{'id': hostvars[item].container_id, 'name': item}] }}"
      when: hostvars[item].proxmox_node == inventory_hostname
      loop: "{{ groups['lxc_containers'] }}"

    - name: Check which containers exist
      shell: "pct status {{ item.id }} 2>/dev/null || echo 'not_found'"
      loop: "{{ my_containers }}"
      register: container_exists
      changed_when: false
      ignore_errors: true

    - name: Display containers to be destroyed
      debug:
        msg: |
          ========================================
          Containers on {{ inventory_hostname }}:
          ========================================
          {% for idx in range(my_containers|length) %}
          {% set container = my_containers[idx] %}
          {% set exists = 'not_found' not in container_exists.results[idx].stdout %}
          - {{ container.name }} (ID: {{ container.id }}): {{ 'EXISTS - WILL BE DESTROYED' if exists else 'Does not exist' }}
          {% endfor %}
          ========================================

          Tailscale cleanup will be attempted for all running containers.
          Device IDs will be collected for API removal.

    - name: Get Tailscale hostname for API lookup
      shell: |
        pct exec {{ item.0.id }} -- bash -c '
          if command -v tailscale &> /dev/null && systemctl is-active --quiet tailscaled; then
            hostname -s 2>/dev/null || echo "{{ item.0.name }}"
          else
            echo ""
          fi
        ' || echo ""
      when:
        - "'not_found' not in item.1.stdout"
        - "'running' in item.1.stdout"
      loop: "{{ my_containers | zip(container_exists.results) | list }}"
      register: tailscale_hostnames
      ignore_errors: true

    - name: Logout from Tailscale before stopping containers
      shell: "pct exec {{ item.0.id }} -- bash -c 'tailscale logout || true' || true"
      when:
        - "'not_found' not in item.1.stdout"
        - "'running' in item.1.stdout"
      loop: "{{ my_containers | zip(container_exists.results) | list }}"
      ignore_errors: true
      register: tailscale_logout

    - name: Stop running containers
      shell: "pct stop {{ item.0.id }} --skiplock 1"
      when:
        - "'not_found' not in item.1.stdout"
        - "'running' in item.1.stdout"
      loop: "{{ my_containers | zip(container_exists.results) | list }}"
      ignore_errors: true
      register: stop_result

    - name: Wait for containers to stop
      pause:
        seconds: 5
      when: stop_result.changed

    - name: Destroy containers
      shell: "pct destroy {{ item.0.id }} --purge 1"
      when: "'not_found' not in item.1.stdout"
      loop: "{{ my_containers | zip(container_exists.results) | list }}"
      register: destroy_result

    - name: Clean up container facts
      file:
        path: /etc/ansible/facts.d/lxc_containers.fact
        state: absent
      ignore_errors: true

    - name: Get all devices from Tailscale API
      uri:
        url: "https://api.tailscale.com/api/v2/tailnet/{{ tailscale_tailnet | default('-') }}/devices"
        method: GET
        user: "{{ vault_tailscale_api_key }}"
        password: ""
        force_basic_auth: true
        status_code: [200]
      when:
        - vault_tailscale_api_key is defined
        - tailscale_hostnames is defined
      register: tailscale_devices_api
      ignore_errors: true
      delegate_to: localhost
      run_once: true

    - name: Build device removal list
      set_fact:
        devices_to_remove: |
          {%- set devices = [] -%}
          {%- if tailscale_devices_api.json is defined and tailscale_devices_api.json.devices is defined -%}
            {%- for device in tailscale_devices_api.json.devices -%}
              {%- for idx in range(my_containers|length) -%}
                {%- if tailscale_hostnames.results[idx].stdout is defined and tailscale_hostnames.results[idx].stdout != "" -%}
                  {%- set hostname = tailscale_hostnames.results[idx].stdout.strip() -%}
                  {%- if device.hostname == hostname or device.name.startswith(hostname + '.') -%}
                    {%- set _ = devices.append({'id': device.id, 'name': device.hostname}) -%}
                  {%- endif -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endfor -%}
          {%- endif -%}
          {{ devices }}
      when: tailscale_devices_api is defined and tailscale_devices_api.json is defined

    - name: Debug Tailscale device removal
      debug:
        msg: |
          Tailscale API Response: {{ tailscale_devices_api.status | default('No response') }}
          Devices found to remove: {{ devices_to_remove | default([]) | length }}
          {% if devices_to_remove is defined and devices_to_remove | length > 0 %}
          Devices:
          {% for device in devices_to_remove %}
          - {{ device.name }} (ID: {{ device.id }})
          {% endfor %}
          {% endif %}
      when: vault_tailscale_api_key is defined

    - name: Remove devices from Tailscale using API
      uri:
        url: "https://api.tailscale.com/api/v2/device/{{ item.id }}"
        method: DELETE
        user: "{{ vault_tailscale_api_key }}"
        password: ""
        force_basic_auth: true
        status_code: [200, 204, 404]
      loop: "{{ devices_to_remove | default([]) }}"
      when:
        - devices_to_remove is defined
        - devices_to_remove | length > 0
        - vault_tailscale_api_key is defined
      register: tailscale_api_removal
      ignore_errors: true
      delegate_to: localhost

    - name: Final destruction report
      debug:
        msg: |
          ========================================
          Destruction Complete on {{ inventory_hostname }}
          ========================================
          {% for idx in range(my_containers|length) %}
          {% set container = my_containers[idx] %}
          {% set existed = 'not_found' not in container_exists.results[idx].stdout %}
          {% set destroyed = destroy_result.results[idx].changed if existed else false %}
          {{ container.name }}: {{ 'DESTROYED' if destroyed else 'Was not present' if not existed else 'FAILED TO DESTROY' }}
          {% endfor %}
          ========================================

- name: Remove GitHub runners from API
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Get list of self-hosted runners from GitHub API
      uri:
        url: "https://api.github.com/repos/{{ vault_github_org }}/{{ vault_github_repo }}/actions/runners"
        method: GET
        headers:
          Authorization: "token {{ vault_github_pat }}"
          Accept: "application/vnd.github.v3+json"
        status_code: [200]
      when:
        - vault_github_pat is defined
        - vault_github_pat != ""
        - vault_github_org is defined
        - vault_github_repo is defined
      register: github_runners_api
      ignore_errors: true

    - name: Build GitHub runner removal list
      set_fact:
        github_runners_to_remove: |
          {%- set runners = [] -%}
          {%- if github_runners_api.json is defined and github_runners_api.json.runners is defined -%}
            {%- for runner in github_runners_api.json.runners -%}
              {%- if runner.name in ['github-runner-sib-01', 'github-runner-sib-03', 'github-runner-sib-02'] -%}
                {%- set _ = runners.append({'id': runner.id, 'name': runner.name, 'status': runner.status}) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{ runners }}
      when: github_runners_api.json is defined

    - name: Debug GitHub runners to remove
      debug:
        msg: |
          GitHub API Response: {{ github_runners_api.status | default('No response') }}
          Runners found to remove: {{ github_runners_to_remove | default([]) | length }}
          {% if github_runners_to_remove is defined and github_runners_to_remove | length > 0 %}
          Runners:
          {% for runner in github_runners_to_remove %}
          - {{ runner.name }} (ID: {{ runner.id }}, Status: {{ runner.status }})
          {% endfor %}
          {% endif %}
      when:
        - vault_github_pat is defined
        - vault_github_pat != ""

    - name: Get all running workflow runs
      uri:
        url: "https://api.github.com/repos/{{ vault_github_org }}/{{ vault_github_repo }}/actions/runs?status=in_progress"
        method: GET
        headers:
          Authorization: "Bearer {{ vault_github_pat }}"
          Accept: "application/vnd.github+json"
          X-GitHub-Api-Version: "2022-11-28"
        status_code: [200]
      when:
        - github_runners_to_remove is defined
        - github_runners_to_remove | length > 0
        - vault_github_pat is defined
        - vault_github_pat != ""
      register: running_workflows
      ignore_errors: true

    - name: Force-cancel all running workflows (bypasses conditions like always())
      uri:
        url: "https://api.github.com/repos/{{ vault_github_org }}/{{ vault_github_repo }}/actions/runs/{{ item.id }}/force-cancel"
        method: POST
        headers:
          Authorization: "Bearer {{ vault_github_pat }}"
          Accept: "application/vnd.github+json"
          X-GitHub-Api-Version: "2022-11-28"
        status_code: [202, 409] # 202 = accepted, 409 = already cancelled/completed
      loop: "{{ running_workflows.json.workflow_runs | default([]) }}"
      when:
        - running_workflows.json is defined
        - running_workflows.json.workflow_runs is defined
        - vault_github_pat is defined
        - vault_github_pat != ""
      register: force_workflow_cancellation
      ignore_errors: true

    - name: Wait for force-cancelled jobs to stop
      pause:
        seconds: 15
      when:
        - force_workflow_cancellation is defined
        - force_workflow_cancellation.changed

    - name: Remove self-hosted runners from GitHub using API
      uri:
        url: "https://api.github.com/repos/{{ vault_github_org }}/{{ vault_github_repo }}/actions/runners/{{ item.id }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ vault_github_pat }}"
          Accept: "application/vnd.github+json"
          X-GitHub-Api-Version: "2022-11-28"
        status_code: [204, 404, 422]
      loop: "{{ github_runners_to_remove | default([]) }}"
      when:
        - github_runners_to_remove is defined
        - github_runners_to_remove | length > 0
        - vault_github_pat is defined
        - vault_github_pat != ""
      register: github_runner_removal_first
      ignore_errors: true

    - name: Retry removal for runners that were still busy
      uri:
        url: "https://api.github.com/repos/{{ vault_github_org }}/{{ vault_github_repo }}/actions/runners/{{ item.item.id }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ vault_github_pat }}"
          Accept: "application/vnd.github+json"
          X-GitHub-Api-Version: "2022-11-28"
        status_code: [204, 404, 422]
      loop: "{{ github_runner_removal_first.results | default([]) }}"
      when:
        - github_runner_removal_first is defined
        - item.status == 422
        - vault_github_pat is defined
        - vault_github_pat != ""
      register: github_runner_removal_retry
      ignore_errors: true
      delay: 10

    - name: Display GitHub runner removal results
      debug:
        msg: |
          ========================================
          GitHub Runner Removal Results
          ========================================
          {% if force_workflow_cancellation is defined and force_workflow_cancellation.results is defined %}
          Force-cancelled {{ force_workflow_cancellation.results | length }} running workflow(s)
          {% endif %}

          {% if github_runner_removal_first is defined and github_runner_removal_first.results is defined %}
          {% for result in github_runner_removal_first.results %}
          {% set runner = github_runners_to_remove[loop.index0] %}
          {% set retry_result = github_runner_removal_retry.results | default([]) | selectattr('item.item.id', 'equalto', runner.id) | first | default(none) %}
          {% if result.status == 204 %}
          {{ runner.name }}: REMOVED
          {% elif result.status == 404 %}
          {{ runner.name }}: NOT FOUND
          {% elif result.status == 422 %}
          {{ runner.name }}: {{ 'REMOVED (on retry)' if retry_result and retry_result.status == 204 else 'STILL BUSY (job running)' }}
          {% else %}
          {{ runner.name }}: FAILED
          {% endif %}
          {% endfor %}
          {% else %}
          No runners to remove (API not configured or no runners found)
          {% endif %}
          ========================================
      when:
        - vault_github_pat is defined
        - vault_github_pat != ""

- name: Summary across all nodes
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Clean SSH known hosts for destroyed containers
      shell: |
        # Clean up any old backup files
        rm -f ~/.ssh/known_hosts.old 2>/dev/null || true

        # Remove all container-related entries
        if [ -f ~/.ssh/known_hosts ]; then
          # Remove Tailscale IP range (100.x.x.x)
          grep -v "^100\." ~/.ssh/known_hosts > ~/.ssh/known_hosts.tmp 2>/dev/null || true
          mv ~/.ssh/known_hosts.tmp ~/.ssh/known_hosts 2>/dev/null || true

          # Remove container network range (10.10.x.x)
          grep -v "^10\.10\." ~/.ssh/known_hosts > ~/.ssh/known_hosts.tmp 2>/dev/null || true
          mv ~/.ssh/known_hosts.tmp ~/.ssh/known_hosts 2>/dev/null || true

          # Remove known container hostnames
          for host in apps-sib-01 apps-sib-03 apps-sib-02 consul-nomad-sib-01 consul-nomad-sib-03 consul-nomad-sib-02 db-sib-01 db-sib-03 db-sib-02 redis-sib-01 redis-sib-03 redis-sib-02 github-runner-sib-01 github-runner-sib-03 github-runner-sib-02 pgbackweb-sib-01; do
            ssh-keygen -f ~/.ssh/known_hosts -R "$host" 2>/dev/null || true
          done
        fi
      changed_when: false

    - name: Display final summary
      debug:
        msg: |
          ========================================
          CONTAINER DESTRUCTION COMPLETE
          ========================================

          All containers have been processed.
          SSH known hosts have been cleaned.

          Next steps if you want to recreate:
          1. Run the container creation playbook
          2. Provide a new Tailscale auth key

          Note: Cleanup attempted for:
          - Tailscale: Logged out from containers and API removal
          - GitHub: Self-hosted runners removed from repository

          If Tailscale devices remain, check:
          - API key permissions (needs device:delete scope)
          - Correct tailnet name in config
          - Manual removal at https://login.tailscale.com/admin/machines

          If GitHub runners remain, check:
          - GitHub PAT permissions (needs admin:org or repo scope)
          - Manual removal at https://github.com/{{ vault_github_org | default('ORG') }}/{{ vault_github_repo | default('REPO') }}/settings/actions/runners
          ========================================
