---
# Gather facts from all hosts first
- name: Gather facts from all hosts
  hosts: all
  gather_facts: true
  tasks:
    - name: Set connection to use tailscale IP if available
      set_fact:
        ansible_host: "{{ tailscale_ip }}"
      when: tailscale_ip is defined and tailscale_ip != ''

# Ensure we have facts from servers before configuring clients
- name: Refresh facts for consul servers
  hosts: consul_servers
  gather_facts: true
  tasks:
    - name: Set connection to use tailscale IP if available
      set_fact:
        ansible_host: "{{ tailscale_ip }}"
      when: tailscale_ip is defined and tailscale_ip != ''

- name: Install and Configure Consul
  hosts: consul_servers
  become: true
  gather_facts: false
  tasks:
    - name: Install required packages
      apt:
        name:
          - consul
        state: present

    - name: Fix Consul directory permissions
      file:
        path: "{{ item }}"
        state: directory
        owner: consul
        group: consul
        mode: "0755"
      loop:
        - /var/lib/consul
        - /opt/consul
        - /etc/consul

    - name: Generate Consul CA
      shell: consul tls ca create
      args:
        creates: /opt/consul/consul-agent-ca.pem
        chdir: /opt/consul
      run_once: true
      delegate_to: consul-nomad-sib-01

    - name: Generate Consul server certificates
      shell: |
        consul tls cert create -server -dc {{ datacenter }} \
          -additional-dnsname={{ inventory_hostname }}.consul
      args:
        creates: /opt/consul/{{ datacenter }}-server-consul-0.pem
        chdir: /opt/consul
      delegate_to: consul-nomad-sib-01

    - name: Fetch CA cert from primary server
      fetch:
        src: /opt/consul/consul-agent-ca.pem
        dest: /tmp/consul-ca/
        flat: yes
      run_once: true
      delegate_to: consul-nomad-sib-01

    - name: Distribute CA cert to all servers
      copy:
        src: /tmp/consul-ca/consul-agent-ca.pem
        dest: /opt/consul/consul-agent-ca.pem
        owner: consul
        group: consul
        mode: "0644"

    - name: Create Consul config directory
      file:
        path: /etc/consul.d
        state: directory
        owner: consul
        group: consul
        mode: "0755"

    - name: Create Consul server configuration
      template:
        src: ../../templates/consul-server.hcl.j2
        dest: /etc/consul.d/consul.hcl
        owner: consul
        group: consul
        mode: "0640"
      notify: restart consul

    - name: Create systemd service directory
      file:
        path: /etc/systemd/system/consul.service.d
        state: directory
        mode: "0755"

    - name: Create Consul systemd service override
      copy:
        content: |
          [Unit]
          Wants=tailscaled.service
          After=network-online.target tailscaled.service
          
          [Service]
          Type=simple
          Environment="CONSUL_CACERT=/opt/consul/consul-agent-ca.pem"
          Environment="CONSUL_CLIENT_CERT=/opt/consul/{{ datacenter }}-server-consul-0.pem"
          Environment="CONSUL_CLIENT_KEY=/opt/consul/{{ datacenter }}-server-consul-0-key.pem"
          TimeoutStartSec=0
          Restart=on-failure
          RestartSec=5
          # Wait for Tailscale interface to be ready
          ExecStartPre=/bin/bash -c 'until ip addr show tailscale0 2>/dev/null | grep -q "inet "; do echo "Waiting for tailscale0 interface..."; sleep 1; done'
        dest: /etc/systemd/system/consul.service.d/override.conf
      notify:
        - reload systemd
        - restart consul

    - name: Bootstrap primary datacenter first
      block:
        - name: Reload systemd and start Consul on primary DC
          systemd:
            name: consul
            state: started
            enabled: yes
            daemon_reload: yes

        - name: Wait for primary DC to be ready
          wait_for:
            port: 8500
            host: "{{ tailscale_ip | default(ansible_tailscale0.ipv4.address | default(ansible_default_ipv4.address)) }}"
            delay: 5
            timeout: 60
      when: datacenter == "dc1"

    - name: Start Consul on secondary datacenters
      block:
        - name: Find primary DC server
          set_fact:
            primary_dc_ip: "{{ hostvars[item].tailscale_ip | default(hostvars[item].ansible_tailscale0.ipv4.address | default(hostvars[item].ansible_default_ipv4.address)) }}"
          loop: "{{ groups['consul_servers'] }}"
          when:
            - hostvars[item]['datacenter'] == "dc1"
            - datacenter != "dc1"

        - name: Wait for primary DC to be up
          wait_for:
            port: 8302
            host: "{{ primary_dc_ip }}"
            delay: 10
            timeout: 60
          when:
            - datacenter != "dc1"
            - primary_dc_ip is defined

        - name: Start Consul on secondary DCs
          systemd:
            name: consul
            state: started
            enabled: yes
            daemon_reload: yes

        - name: Wait for Consul to be ready
          wait_for:
            port: 8500
            host: "{{ tailscale_ip | default(ansible_tailscale0.ipv4.address | default(ansible_default_ipv4.address)) }}"
            delay: 5
            timeout: 60
      when: datacenter != "dc1"

    - name: Check existing WAN members
      shell: consul members -wan | grep -v "$(hostname)" | awk '{print $2}' | cut -d':' -f1
      register: existing_wan_members
      changed_when: false
      when: datacenter == "dc1"
      run_once: true

    - name: Establish WAN federation from primary DC
      shell: |
        {% for host in groups['consul_servers'] %}
        {% if hostvars[host]['datacenter'] != "dc1" %}
        {% set host_ip = hostvars[host].tailscale_ip | default(hostvars[host].ansible_tailscale0.ipv4.address | default(hostvars[host].ansible_default_ipv4.address)) %}
        if ! echo "{{ existing_wan_members.stdout }}" | grep -q "{{ host_ip }}"; then
          consul join -wan {{ host_ip }}:8302
        else
          echo "{{ host_ip }} already in WAN federation"
        fi
        {% endif %}
        {% endfor %}
      when: datacenter == "dc1"
      run_once: true
      retries: 3
      delay: 5
      register: wan_join_result
      until: wan_join_result.rc == 0

    - name: Deploy Consul WAN health check script
      template:
        src: ../../templates/consul-wan-health.sh.j2
        dest: /usr/local/bin/consul-wan-health.sh
        owner: root
        group: root
        mode: "0755"

    - name: Deploy Consul WAN health check service
      template:
        src: ../../templates/consul-wan-health.service.j2
        dest: /etc/systemd/system/consul-wan-health.service
        owner: root
        group: root
        mode: "0644"
      notify:
        - reload systemd
        - restart consul-wan-health

    - name: Enable and start Consul WAN health check
      systemd:
        name: consul-wan-health
        state: started
        enabled: yes
        daemon_reload: yes

    # Note: consul-replicate removed as etcd is now used for Patroni DCS

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart consul
      systemd:
        name: consul
        state: restarted

    - name: restart consul-wan-health
      systemd:
        name: consul-wan-health
        state: restarted


- name: Configure Consul Clients on Nomad nodes
  hosts: nomad_clients
  become: true
  gather_facts: false
  tasks:
    - name: Install required packages
      apt:
        name:
          - consul
        state: present

    - name: Fix Consul directory permissions
      file:
        path: "{{ item }}"
        state: directory
        owner: consul
        group: consul
        mode: "0755"
      loop:
        - /var/lib/consul
        - /opt/consul
        - /etc/consul

    - name: Fetch CA cert from server
      fetch:
        src: /opt/consul/consul-agent-ca.pem
        dest: /tmp/consul-ca/
        flat: yes
      delegate_to: consul-nomad-sib-01
      run_once: true

    - name: Copy CA cert to clients
      copy:
        src: /tmp/consul-ca/consul-agent-ca.pem
        dest: /opt/consul/consul-agent-ca.pem
        owner: consul
        group: consul
        mode: "0644"

    - name: Create Consul config directory
      file:
        path: /etc/consul.d
        state: directory
        owner: consul
        group: consul
        mode: "0755"

    - name: Create Consul client configuration
      template:
        src: ../../templates/consul-client.hcl.j2
        dest: /etc/consul.d/consul.hcl
        owner: consul
        group: consul
        mode: "0640"
      notify: restart consul

    - name: Create systemd service directory for clients
      file:
        path: /etc/systemd/system/consul.service.d
        state: directory
        mode: "0755"

    - name: Create Consul systemd service override for clients
      copy:
        content: |
          [Unit]
          Wants=tailscaled.service
          After=network-online.target tailscaled.service
          
          [Service]
          Type=simple
          TimeoutStartSec=0
          Restart=on-failure
          RestartSec=5
          # Wait for Tailscale interface to be ready
          ExecStartPre=/bin/bash -c 'until ip addr show tailscale0 2>/dev/null | grep -q "inet "; do echo "Waiting for tailscale0 interface..."; sleep 1; done'
        dest: /etc/systemd/system/consul.service.d/override.conf
      notify:
        - reload systemd
        - restart consul

    - name: Reload systemd and start Consul
      systemd:
        name: consul
        state: started
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart consul
      systemd:
        name: consul
        state: restarted

- name: Configure Consul Clients on PostgreSQL nodes
  hosts: postgres_nodes
  become: true
  gather_facts: false
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - consul
        state: present

    - name: Fix Consul directory permissions
      file:
        path: "{{ item }}"
        state: directory
        owner: consul
        group: consul
        mode: "0755"
      loop:
        - /var/lib/consul
        - /opt/consul
        - /etc/consul

    - name: Fetch CA cert from server
      fetch:
        src: /opt/consul/consul-agent-ca.pem
        dest: /tmp/consul-ca/
        flat: yes
      delegate_to: consul-nomad-sib-01
      run_once: true

    - name: Copy CA cert to clients
      copy:
        src: /tmp/consul-ca/consul-agent-ca.pem
        dest: /opt/consul/consul-agent-ca.pem
        owner: consul
        group: consul
        mode: "0644"

    - name: Create Consul config directory
      file:
        path: /etc/consul.d
        state: directory
        owner: consul
        group: consul
        mode: "0755"

    - name: Create Consul client configuration
      template:
        src: ../../templates/consul-client.hcl.j2
        dest: /etc/consul.d/consul.hcl
        owner: consul
        group: consul
        mode: "0640"
      notify: restart consul postgres

    - name: Create systemd service directory for clients
      file:
        path: /etc/systemd/system/consul.service.d
        state: directory
        mode: "0755"

    - name: Create Consul systemd service override for clients
      copy:
        content: |
          [Unit]
          Wants=tailscaled.service
          After=network-online.target tailscaled.service
          
          [Service]
          Type=simple
          TimeoutStartSec=0
          Restart=on-failure
          RestartSec=5
          # Wait for Tailscale interface to be ready
          ExecStartPre=/bin/bash -c 'until ip addr show tailscale0 2>/dev/null | grep -q "inet "; do echo "Waiting for tailscale0 interface..."; sleep 1; done'
        dest: /etc/systemd/system/consul.service.d/override.conf
      notify:
        - reload systemd postgres
        - restart consul postgres

    - name: Reload systemd and start Consul
      systemd:
        name: consul
        state: started
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: reload systemd postgres
      systemd:
        daemon_reload: yes

    - name: restart consul postgres
      systemd:
        name: consul
        state: restarted

# Verification checks at the end
- name: Verify Consul Cluster
  hosts: consul_servers
  gather_facts: false
  tasks:
    - name: Wait for Consul to stabilize
      pause:
        seconds: "10"
        prompt: "Waiting for Consul to stabilize ({{ datacenter }})"

    - name: Check Consul cluster health
      shell: |
        # Check if Consul is running
        if ! systemctl is-active consul >/dev/null 2>&1; then
          echo "ERROR: Consul service is not running"
          exit 1
        fi

        # Check cluster members
        members=$(consul members 2>&1)
        if [ $? -ne 0 ]; then
          echo "ERROR: Cannot query Consul members: $members"
          exit 1
        fi

        # Count alive servers
        alive_servers=$(echo "$members" | grep -c "alive.*server")
        if [ $alive_servers -lt 1 ]; then
          echo "ERROR: No alive Consul servers found"
          exit 1
        fi

        echo "OK: Found $alive_servers alive Consul servers"
        echo "$members"
      register: consul_health
      changed_when: false
      failed_when: consul_health.rc != 0

    - name: Check Consul leader election
      shell: |
        # With single server per DC, each DC has its own leader
        # Check if this server is the leader (it should be, as the only server)
        if ! consul info 2>&1 | grep -q "leader = true"; then
          echo "ERROR: Server is not a leader in {{ datacenter }}"
          exit 1
        fi
        echo "OK: Server is leader in {{ datacenter }}"
        
        # Verify WAN federation
        wan_members=$(consul members -wan | grep -c server)
        if [ "$wan_members" -lt 3 ]; then
          echo "WARNING: Only $wan_members servers in WAN federation (expected 3)"
        fi
        
        consul members -wan
      register: consul_leader
      changed_when: false
      retries: 5
      delay: 10
      until: consul_leader.rc == 0

    - name: Verify WAN federation (from dc1)
      shell: |
        wan_members=$(consul members -wan 2>&1)
        if [ $? -ne 0 ]; then
          echo "ERROR: Cannot query WAN members: $wan_members"
          exit 1
        fi

        # Count datacenters
        dc_count=$(echo "$wan_members" | grep -c "server.*alive")
        expected_dcs={{ groups['consul_servers'] | map('extract', hostvars, 'datacenter') | unique | list | length }}

        if [ $dc_count -ne $expected_dcs ]; then
          echo "ERROR: Expected $expected_dcs datacenters, found $dc_count"
          echo "$wan_members"
          exit 1
        fi

        echo "OK: WAN federation established with $dc_count datacenters"
        echo "$wan_members"
      register: wan_federation
      changed_when: false
      when: datacenter == "dc1"
      run_once: true

    - name: Test Consul DNS resolution
      shell: |
        # Test resolving consul service
        if ! dig @127.0.0.1 -p 8600 consul.service.consul +short | grep -q "{{ tailscale_ip | default(ansible_default_ipv4.address) }}"; then
          echo "ERROR: Consul DNS not resolving properly"
          exit 1
        fi
        echo "OK: Consul DNS working"
      register: consul_dns
      changed_when: false

    - name: Display Consul verification summary
      debug:
        msg: |
          ========================================
          Consul Cluster Verification Summary
          ========================================
          Service Status: {{ 'RUNNING' if 'OK' in consul_health.stdout else 'FAILED' }}
          Leader Election: {{ 'YES' if consul_leader.rc == 0 else 'NO' }}
          WAN Federation: {{ 'ESTABLISHED' if (datacenter != 'dc1' or (wan_federation is defined and wan_federation.rc == 0)) else 'N/A' }}
          DNS Resolution: {{ 'WORKING' if consul_dns.rc == 0 else 'FAILED' }}

          Cluster Members:
          {{ consul_health.stdout | indent(2) }}

          {% if datacenter == 'dc1' and wan_federation is defined %}
          WAN Members:
          {{ wan_federation.stdout | indent(2) }}
          {% endif %}

          Access Consul UI at: http://{{ tailscale_ip | default(ansible_default_ipv4.address) }}:8500
          ========================================
      run_once: true

- name: Verify Consul Clients
  hosts: nomad_clients
  gather_facts: false
  tasks:
    - name: Check Consul client health
      shell: |
        if ! systemctl is-active consul >/dev/null 2>&1; then
          echo "ERROR: Consul service is not running"
          exit 1
        fi

        # Check if connected to cluster
        if ! consul members | grep -q "{{ inventory_hostname }}.*alive"; then
          echo "ERROR: Not connected to Consul cluster"
          exit 1
        fi

        echo "OK: Consul client connected"
      register: client_health
      changed_when: false
      failed_when: client_health.rc != 0

    - name: Display client status
      debug:
        msg: "Consul client on {{ inventory_hostname }}: {{ client_health.stdout }}"

- name: Verify Consul Clients on PostgreSQL nodes
  hosts: postgres_nodes
  gather_facts: false
  tasks:
    - name: Check Consul client health
      shell: |
        if ! systemctl is-active consul >/dev/null 2>&1; then
          echo "ERROR: Consul service is not running"
          exit 1
        fi

        # Check if connected to cluster
        if ! consul members | grep -q "{{ inventory_hostname }}.*alive"; then
          echo "ERROR: Not connected to Consul cluster"
          exit 1
        fi

        echo "OK: Consul client connected"
      register: client_health
      changed_when: false
      failed_when: client_health.rc != 0

    - name: Display client status
      debug:
        msg: "Consul client on {{ inventory_hostname }}: {{ client_health.stdout }}"
