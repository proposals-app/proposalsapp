---
# Unified verification playbook for PostgreSQL and Redis
# Tests all database connections and configurations

- name: Verify Database Connections
  hosts: nomad_clients
  gather_facts: false
  vars:
    postgres_password: "{{ vault_postgres_password }}"
    redis_password: "{{ vault_redis_password }}"
    etcd_endpoints: "{% for host in groups['postgres_nodes'] %}http://{{ hostvars[host]['tailscale_ip'] }}:2379{% if not loop.last %},{% endif %}{% endfor %}"

  tasks:
    - name: Display verification header
      debug:
        msg: |
          ========================================
          Database Connection Verification
          ========================================
          Testing from: {{ inventory_hostname }}
          Datacenter: {{ datacenter }}
          ========================================

    # PostgreSQL verification
    - name: Test PostgreSQL via pgpool
      shell: |
        echo "Testing PostgreSQL connection via pgpool..."
        PGPASSWORD='{{ postgres_password }}' psql -h localhost -p 5432 -U proposalsapp -d proposalsapp -c "SELECT version();" | head -1
      register: pg_version
      changed_when: false

    - name: Test PostgreSQL write operation
      shell: |
        PGPASSWORD='{{ postgres_password }}' psql -h localhost -p 5432 -U proposalsapp -d proposalsapp -c "
          CREATE TABLE IF NOT EXISTS test_verification (
            id SERIAL PRIMARY KEY,
            hostname VARCHAR(255),
            datacenter VARCHAR(50),
            test_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          INSERT INTO test_verification (hostname, datacenter) 
          VALUES ('{{ inventory_hostname }}', '{{ datacenter }}');
          SELECT COUNT(*) FROM test_verification;
        " -t
      register: pg_write_test
      changed_when: false

    - name: Test PostgreSQL read operation
      shell: |
        PGPASSWORD='{{ postgres_password }}' psql -h localhost -p 5432 -U proposalsapp -d proposalsapp -c "
          SELECT hostname, datacenter, test_time 
          FROM test_verification 
          ORDER BY test_time DESC 
          LIMIT 5;
        "
      register: pg_read_test
      changed_when: false

    - name: Check pgpool backend status
      shell: |
        echo "show pool_nodes;" | PGPASSWORD='{{ postgres_password }}' psql -h localhost -p 5432 -U proposalsapp -d proposalsapp
      register: pgpool_nodes
      changed_when: false

    # Redis verification
    - name: Test Redis via HAProxy
      shell: |
        echo "Testing Redis connection via HAProxy..."
        redis-cli -h localhost -p 6380 -a '{{ redis_password }}' ping
      register: redis_ping
      changed_when: false

    - name: Test Redis write operation
      shell: |
        TIMESTAMP=$(date +%s)
        redis-cli -h localhost -p 6380 -a '{{ redis_password }}' SET "test:{{ inventory_hostname }}:${TIMESTAMP}" "{{ datacenter }}" EX 300
        redis-cli -h localhost -p 6380 -a '{{ redis_password }}' GET "test:{{ inventory_hostname }}:${TIMESTAMP}"
      register: redis_write_test
      changed_when: false

    - name: Test Redis read operations
      shell: |
        # Test multiple reads to verify local routing
        for i in {1..5}; do
          START=$(date +%s%N)
          redis-cli -h localhost -p 6380 -a '{{ redis_password }}' GET "test:key$i" > /dev/null
          END=$(date +%s%N)
          LATENCY=$((($END - $START) / 1000000))
          echo "Read $i latency: ${LATENCY}ms"
          sleep 0.1
        done
      register: redis_read_test
      changed_when: false

    - name: Check Redis replication status via HAProxy
      shell: |
        redis-cli -h localhost -p 6380 -a '{{ redis_password }}' INFO replication | grep -E "role:|connected_slaves:|slave[0-9]+:"
      register: redis_replication
      changed_when: false

    # etcd verification
    - name: Check etcd connectivity
      shell: |
        etcdctl --endpoints="{{ etcd_endpoints }}" endpoint health
      register: etcd_health
      changed_when: false

    - name: Check PostgreSQL keys in etcd
      shell: |
        echo "=== PostgreSQL/Patroni keys in etcd ==="
        etcdctl --endpoints="{{ etcd_endpoints }}" get /service/proposalsapp --prefix --keys-only | head -10
        echo ""
        echo "=== pgpool configuration keys ==="
        etcdctl --endpoints="{{ etcd_endpoints }}" get /local --prefix
        etcdctl --endpoints="{{ etcd_endpoints }}" get /pgcat --prefix
      register: etcd_pg_keys
      changed_when: false

    - name: Check Redis keys in etcd
      shell: |
        echo "=== Redis keys in etcd ==="
        etcdctl --endpoints="{{ etcd_endpoints }}" get /service/redis --prefix --keys-only | head -10
      register: etcd_redis_keys
      changed_when: false

    # Service checks
    - name: Check running services
      systemd:
        name: "{{ item }}"
      register: service_status
      loop:
        - pgpool
        - haproxy
        - confd
      failed_when: false

    - name: Check Consul service registrations
      uri:
        url: "http://localhost:8500/v1/agent/services"
        method: GET
      register: consul_services
      changed_when: false

    # Performance tests
    - name: Run PostgreSQL performance test
      shell: |
        echo "Running 100 sequential reads via pgpool..."
        START=$(date +%s%N)
        for i in {1..100}; do
          PGPASSWORD='{{ postgres_password }}' psql -h localhost -p 5432 -U proposalsapp -d proposalsapp -c "SELECT 1;" -t -A >/dev/null
        done
        END=$(date +%s%N)
        DURATION=$((($END - $START) / 1000000))
        echo "Completed 100 reads in ${DURATION}ms (average: $((DURATION / 100))ms per query)"
      register: pg_perf_test
      changed_when: false

    - name: Run Redis performance test
      shell: |
        echo "Running Redis benchmark via HAProxy..."
        redis-benchmark -h localhost -p 6380 -a '{{ redis_password }}' -t get,set -n 1000 -q
      register: redis_perf_test
      changed_when: false
      ignore_errors: yes

    # Display results
    - name: Display verification summary
      debug:
        msg: |
          ========================================
          VERIFICATION SUMMARY for {{ inventory_hostname }}
          ========================================

          PostgreSQL via pgpool (port 5432):
          ✓ Version: {{ pg_version.stdout | trim }}
          ✓ Write test: {{ 'PASSED' if pg_write_test.rc == 0 else 'FAILED' }}
          ✓ Read test: {{ 'PASSED' if pg_read_test.rc == 0 else 'FAILED' }}

          pgpool Backend Status:
          {{ pgpool_nodes.stdout }}

          Redis via HAProxy (port 6380):
          ✓ Ping: {{ redis_ping.stdout }}
          ✓ Write test: {{ 'PASSED' if redis_write_test.rc == 0 else 'FAILED' }}
          ✓ Read test: {{ 'PASSED' if redis_read_test.rc == 0 else 'FAILED' }}

          Redis Replication:
          {{ redis_replication.stdout }}

          etcd Health:
          {{ etcd_health.stdout }}

          Service Status:
          {% for result in service_status.results %}
          - {{ result.item }}: {{ result.status.ActiveState | default('not found') }}
          {% endfor %}

          Performance Tests:
          PostgreSQL: {{ pg_perf_test.stdout_lines[-1] | default('N/A') }}
          Redis: {{ redis_perf_test.stdout | default('N/A') }}

          Consul Services: {{ consul_services.json | length }} registered
          ========================================

# Summary across all nodes
- name: Display cluster-wide summary
  hosts: nomad_clients[0]
  gather_facts: false
  vars:
    postgres_password: "{{ vault_postgres_password }}"
    redis_password: "{{ vault_redis_password }}"
  tasks:
    - name: Get PostgreSQL cluster status
      shell: |
        PGPASSWORD='{{ postgres_password }}' psql -h localhost -p 5432 -U proposalsapp -d proposalsapp -c "
          SELECT hostname, datacenter, COUNT(*) as tests, MAX(test_time) as last_test 
          FROM test_verification 
          GROUP BY hostname, datacenter 
          ORDER BY datacenter, hostname;
        "
      register: pg_cluster_summary
      changed_when: false

    - name: Display cluster-wide summary
      debug:
        msg: |
          ========================================
          CLUSTER-WIDE VERIFICATION SUMMARY
          ========================================

          Test Results from All Nodes:
          {{ pg_cluster_summary.stdout }}

          Connection Strings:
          - PostgreSQL via pgpool: postgresql://proposalsapp:***@localhost:5432/proposalsapp
          - Redis via HAProxy: redis://:***@localhost:6380

          All database connections have been verified successfully!
          ========================================
