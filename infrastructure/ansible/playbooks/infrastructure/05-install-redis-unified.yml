---
# Unified Redis installation playbook
# Installs Redis with Sentinel on dedicated nodes and HAProxy on app nodes
# Uses the same etcd instance as PostgreSQL for configuration management

# Part 1: Install Redis and Sentinel on dedicated redis nodes
- name: Install and configure Redis with Sentinel
  hosts: redis_nodes
  become: true
  vars:
    redis_version: "7"
    redis_port: 6379
    sentinel_port: 26379
    redis_password: "{{ vault_redis_password }}"
    redis_maxmemory: "2gb"
    redis_maxmemory_policy: "allkeys-lru"
    etcd_client_port: 2379
    etcd_endpoints: "{% for host in groups['postgres_nodes'] %}http://{{ hostvars[host]['tailscale_ip'] }}:{{ etcd_client_port }}{% if not loop.last %},{% endif %}{% endfor %}"

  tasks:
    - name: Create directory for APT keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Redis GPG key
      get_url:
        url: https://packages.redis.io/gpg
        dest: /etc/apt/keyrings/redis-archive-keyring.asc
        mode: '0644'

    - name: Add Redis APT repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/redis-archive-keyring.asc] https://packages.redis.io/deb {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

    - name: Install Redis and dependencies
      apt:
        name:
          - redis-server
          - redis-sentinel
          - redis-tools
          - python3-redis
          - jq
          - curl
          - etcd-client
        state: present
        update_cache: yes

    - name: Stop default Redis services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - redis-server
        - redis-sentinel
      ignore_errors: yes

    - name: Create Redis directories
      file:
        path: "{{ item }}"
        state: directory
        owner: redis
        group: redis
        mode: '0755'
      loop:
        - /etc/redis
        - /var/lib/redis
        - /var/log/redis
        - /run/redis
        - /run/redis-sentinel

    - name: Determine initial Redis role
      set_fact:
        redis_role: "{% if inventory_hostname == 'redis-sib-01' %}master{% else %}replica{% endif %}"

    - name: Create Redis configuration
      template:
        src: ../../templates/redis.conf.j2
        dest: /etc/redis/redis.conf
        owner: redis
        group: redis
        mode: '0640'
        backup: yes

    - name: Create Redis Sentinel configuration
      template:
        src: ../../templates/redis-sentinel.conf.j2
        dest: /etc/redis/sentinel.conf
        owner: redis
        group: redis
        mode: '0640'
        backup: yes

    - name: Create Redis systemd service
      copy:
        content: |
          [Unit]
          Description=Redis In-Memory Data Store
          After=network.target consul.service
          Before=nomad.service
          
          [Service]
          Type=notify
          ExecStart=/usr/bin/redis-server /etc/redis/redis.conf --supervised systemd
          ExecStop=/usr/bin/redis-cli -a {{ redis_password }} shutdown
          
          # Health check before considering service started
          ExecStartPost=/bin/bash -c 'for i in {1..30}; do redis-cli -a {{ redis_password }} ping >/dev/null 2>&1 && exit 0 || sleep 1; done; exit 1'
          
          TimeoutStopSec=0
          TimeoutStartSec=60
          Restart=always
          User=redis
          Group=redis
          RuntimeDirectory=redis redis-sentinel
          RuntimeDirectoryMode=0755
          
          # Security
          NoNewPrivileges=yes
          PrivateTmp=yes
          ProtectSystem=strict
          ReadWritePaths=/var/lib/redis /var/log/redis /run/redis /run/redis-sentinel /etc/redis
          
          # Performance
          LimitNOFILE=65535
          
          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/redis.service
        mode: '0644'

    - name: Create Redis Sentinel systemd service
      copy:
        content: |
          [Unit]
          Description=Redis Sentinel
          After=network.target redis.service
          
          [Service]
          Type=notify
          ExecStart=/usr/bin/redis-sentinel /etc/redis/sentinel.conf --supervised systemd
          Restart=always
          User=redis
          Group=redis
          RuntimeDirectory=redis-sentinel
          RuntimeDirectoryMode=0755
          
          # Security
          NoNewPrivileges=yes
          PrivateTmp=yes
          ProtectSystem=strict
          ReadWritePaths=/var/lib/redis /var/log/redis /run/redis /run/redis-sentinel /etc/redis
          
          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/redis-sentinel.service
        mode: '0644'

    - name: Create Redis etcd registration script
      template:
        src: ../../templates/redis-etcd-register.sh.j2
        dest: /usr/local/bin/redis-etcd-register
        owner: root
        group: root
        mode: '0755'

    - name: Create Redis etcd registration service
      copy:
        content: |
          [Unit]
          Description=Register Redis in etcd
          After=redis.service network-online.target
          Wants=network-online.target
          
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/redis-etcd-register
          RemainAfterExit=yes
          
          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/redis-etcd-register.service
        mode: '0644'

    - name: Create Redis etcd registration timer
      copy:
        content: |
          [Unit]
          Description=Periodically register Redis in etcd
          
          [Timer]
          OnBootSec=30s
          OnUnitActiveSec=30s
          
          [Install]
          WantedBy=timers.target
        dest: /etc/systemd/system/redis-etcd-register.timer
        mode: '0644'

    - name: Start and enable Redis service
      systemd:
        name: redis
        state: started
        enabled: true
        daemon_reload: true

    - name: Wait for Redis to start
      wait_for:
        port: "{{ redis_port }}"
        host: localhost
        delay: 5
        timeout: 30

    - name: Set up Redis replication on replicas
      shell: |
        redis-cli -a {{ redis_password }} REPLICAOF {{ hostvars['redis-sib-01']['tailscale_ip'] }} {{ redis_port }}
      when: redis_role == "replica"
      ignore_errors: yes

    - name: Create Sentinel log file
      file:
        path: /var/log/redis/sentinel.log
        state: touch
        owner: redis
        group: redis
        mode: '0640'

    - name: Wait before starting Sentinel
      pause:
        seconds: 10
      run_once: true

    - name: Start and enable Redis Sentinel
      systemd:
        name: redis-sentinel
        state: started
        enabled: true

    - name: Enable and start Redis etcd registration timer
      systemd:
        name: redis-etcd-register.timer
        enabled: yes
        state: started

    - name: Run initial Redis etcd registration
      systemd:
        name: redis-etcd-register.service
        state: started

    - name: Create Redis health check script
      template:
        src: ../../templates/redis-health-check.sh.j2
        dest: /usr/local/bin/redis-health-check
        owner: root
        group: root
        mode: '0755'

    - name: Create Redis Consul health check
      copy:
        content: |
          {
            "service": {
              "name": "redis",
              "tags": ["database", "cache", "{{ redis_role }}"],
              "port": {{ redis_port }},
              "check": {
                "id": "redis-health",
                "name": "Redis Health Check",
                "args": ["/usr/local/bin/redis-health-check"],
                "interval": "10s",
                "timeout": "5s"
              }
            }
          }
        dest: /etc/consul.d/redis.json
        mode: '0644'

    - name: Reload Consul to register Redis service
      systemd:
        name: consul
        state: reloaded

    - name: Test Redis connectivity
      shell: |
        redis-cli -a {{ redis_password }} ping
      register: redis_ping
      changed_when: false

    - name: Display Redis status
      debug:
        msg: |
          Redis installation complete!
          Node: {{ inventory_hostname }}
          Role: {{ redis_role }}
          Redis Port: {{ redis_port }}
          Sentinel Port: {{ sentinel_port }}
          Status: {{ redis_ping.stdout }}

# Part 2: Configure HAProxy for Redis on app nodes
- name: Install HAProxy for Redis on app nodes
  hosts: nomad_clients
  become: yes
  vars:
    etcd_endpoints: "{% for host in groups['postgres_nodes'] %}http://{{ hostvars[host]['tailscale_ip'] }}:2379{% if not loop.last %},{% endif %}{% endfor %}"
    redis_password: "{{ vault_redis_password }}"

  tasks:
    - name: Ensure HAProxy and Redis tools are installed
      package:
        name: 
          - haproxy
          - redis-tools
        state: present
        update_cache: yes

    - name: Create HAProxy runtime directory
      file:
        path: /var/run/haproxy
        state: directory
        owner: haproxy
        group: haproxy
        mode: '0755'

    - name: Copy HAProxy template for Redis
      copy:
        src: ../../files/haproxy-redis.cfg.tmpl
        dest: /etc/confd/templates/haproxy-redis.cfg.tmpl
        mode: '0644'

    - name: Create Redis resource configuration for Confd
      copy:
        content: |
          [template]
          src = "haproxy-redis.cfg.tmpl"
          dest = "/etc/haproxy/haproxy.cfg"
          keys = [
            "/service/redis",
            "/service/redis-sentinel",
          ]
          check_cmd = "haproxy -f {{ '{{.src}}' }} -c"
          reload_cmd = "systemctl reload haproxy || systemctl restart haproxy"
        dest: /etc/confd/conf.d/redis.toml
        mode: '0644'

    - name: Set Redis configuration in etcd
      shell: |
        {% for host in groups['postgres_nodes'] %}
        etcdctl --endpoints=http://{{ hostvars[host]['tailscale_ip'] }}:2379 \
          put "/service/redis/password" "{{ redis_password }}" && break
        {% endfor %}
      run_once: true

    - name: Initialize Redis instances structure in etcd
      shell: |
        {% for host in groups['postgres_nodes'] %}
        etcdctl --endpoints=http://{{ hostvars[host]['tailscale_ip'] }}:2379 \
          put "/service/redis/instances" "{}" && break
        {% endfor %}
      run_once: true

    - name: Wait for Redis nodes to register in etcd
      pause:
        seconds: 30
        prompt: "Waiting for Redis nodes to register themselves in etcd..."

    - name: Check etcd Redis data
      shell: |
        {% for host in groups['postgres_nodes'] %}
        etcdctl --endpoints=http://{{ hostvars[host]['tailscale_ip'] }}:2379 \
          get /service/redis --prefix && break
        {% endfor %}
      register: etcd_redis_data
      run_once: true

    - name: Debug etcd Redis data
      debug:
        var: etcd_redis_data.stdout_lines
      run_once: true

    - name: Restart Confd to pick up Redis template
      systemd:
        name: confd
        state: restarted

    - name: Wait for Confd to generate HAProxy configuration
      pause:
        seconds: 15

    - name: Check if HAProxy config was generated
      stat:
        path: /etc/haproxy/haproxy.cfg
      register: haproxy_cfg

    - name: Create HAProxy systemd override directory
      file:
        path: /etc/systemd/system/haproxy.service.d
        state: directory
        mode: '0755'

    - name: Create HAProxy systemd override for dependencies
      copy:
        content: |
          [Unit]
          After=network-online.target confd.service consul.service
          Before=nomad.service
          
          [Service]
          # Health check to ensure Redis is accessible
          ExecStartPost=/bin/bash -c 'for i in {1..30}; do redis-cli -h localhost -p 6380 -a {{ redis_password }} ping >/dev/null 2>&1 && exit 0 || sleep 1; done; exit 1'
          TimeoutStartSec=60
        dest: /etc/systemd/system/haproxy.service.d/dependencies.conf
        mode: '0644'

    - name: Ensure HAProxy service is enabled and started
      systemd:
        name: haproxy
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Restart HAProxy to load Redis configuration
      systemd:
        name: haproxy
        state: restarted
      when: haproxy_cfg.stat.exists

    - name: Wait for HAProxy Redis port
      wait_for:
        port: 6380
        host: localhost
        timeout: 30
        delay: 5

    - name: Create Redis test script
      copy:
        content: |
          #!/bin/bash
          # Test Redis connection through HAProxy
          
          REDIS_PASSWORD="{{ redis_password }}"
          
          echo "Testing Redis connection through HAProxy on port 6380..."
          redis-cli -h localhost -p 6380 -a "$REDIS_PASSWORD" ping
          
          echo "Testing write operation..."
          redis-cli -h localhost -p 6380 -a "$REDIS_PASSWORD" SET test:key "test-value-$(date +%s)"
          
          echo "Testing read operation..."
          redis-cli -h localhost -p 6380 -a "$REDIS_PASSWORD" GET test:key
          
          echo ""
          echo "Getting replication info..."
          redis-cli -h localhost -p 6380 -a "$REDIS_PASSWORD" INFO replication | grep -E "role:|connected_slaves:|slave[0-9]+:"
        dest: /usr/local/bin/test-redis
        mode: '0755'

    - name: Test Redis through HAProxy
      command: /usr/local/bin/test-redis
      register: redis_test
      retries: 3
      delay: 5
      until: redis_test.rc == 0

    # Note: Redis connection strings are stored in all datacenters via separate play below

    - name: Display HAProxy Redis info
      debug:
        msg: |
          ========================================
          Redis HA Cluster with HAProxy
          ========================================
          Connect to Redis via: localhost:6380
          Password: Stored in vault as vault_redis_password
          
          Connection string: redis://:***@localhost:6380
          
          Test with: /usr/local/bin/test-redis
          
          Features:
          - Automatic master discovery via Sentinel
          - LOCAL-ONLY reads when local Redis is healthy
          - Write commands always go to master
          - Read commands use local instance (backup mode for remote)
          ========================================

    # Register HAProxy with Consul for service discovery
    - name: Create HAProxy health check script
      copy:
        content: |
          #!/bin/bash
          # Check if HAProxy is running and responding
          curl -f http://localhost:8404/stats >/dev/null 2>&1 || exit 1
          # Check if Redis backend is reachable via HAProxy
          timeout 2 redis-cli -h localhost -p 6380 -a '{{ redis_password }}' ping >/dev/null 2>&1 || exit 2
          exit 0
        dest: /usr/local/bin/haproxy-redis-health-check
        mode: '0755'

    - name: Create HAProxy Consul service definition
      copy:
        content: |
          {
            "service": {
              "name": "haproxy-redis",
              "tags": ["proxy", "redis", "cache", "local"],
              "port": 6380,
              "check": {
                "id": "haproxy-redis-health",
                "name": "HAProxy Redis Health Check",
                "args": ["/usr/local/bin/haproxy-redis-health-check"],
                "interval": "10s",
                "timeout": "5s"
              }
            }
          }
        dest: /etc/consul.d/haproxy-redis.json
        mode: '0644'

    - name: Reload Consul to register HAProxy service
      systemd:
        name: consul
        state: reloaded

# Part 3: Verification
- name: Verify Redis Cluster
  hosts: redis_nodes[0]
  gather_facts: false
  vars:
    redis_password: "{{ vault_redis_password }}"
    etcd_endpoints: "{% for host in groups['postgres_nodes'] %}http://{{ hostvars[host]['tailscale_ip'] }}:2379{% if not loop.last %},{% endif %}{% endfor %}"
  tasks:
    - name: Get Redis replication status
      shell: |
        echo "=== REDIS REPLICATION STATUS ==="
        redis-cli -a {{ redis_password }} INFO replication
        echo ""
        echo "=== SENTINEL STATUS ==="
        redis-cli -p 26379 SENTINEL masters
        echo ""
        echo "=== ETCD REDIS KEYS ==="
        etcdctl --endpoints="{{ etcd_endpoints }}" get /service/redis --prefix --keys-only
      register: redis_overview
      changed_when: false

    - name: Display Redis cluster overview
      debug:
        msg: |
          ========================================
          Redis Cluster Overview
          ========================================
          {{ redis_overview.stdout }}
          ========================================

# Store Redis connection strings in all datacenters
- name: Store Redis connection strings in Consul KV across all datacenters
  hosts: consul_servers
  become: true
  vars:
    redis_password: "{{ vault_redis_password }}"
    consul_kv_values:
      - { key: "redis/connection_string/haproxy", value: "redis://:{{ redis_password | urlencode }}@localhost:6380" }
      - { key: "redis/port/haproxy", value: "6380" }
      - { key: "redis/password", value: "{{ redis_password }}" }
      - { key: "redis/enabled", value: "true" }
  
  tasks:
    - name: Ensure Consul is available
      wait_for:
        port: 8500
        host: localhost
        timeout: 60

    - name: Get local Consul datacenter info
      uri:
        url: "http://localhost:8500/v1/agent/self"
        method: GET
      register: consul_info

    - name: Set datacenter variable
      set_fact:
        current_datacenter: "{{ consul_info.json.Config.Datacenter }}"

    - name: Store Redis values in local datacenter's Consul KV
      uri:
        url: "http://localhost:8500/v1/kv/{{ item.key }}"
        method: PUT
        body: "{{ item.value }}"
      loop: "{{ consul_kv_values }}"
      loop_control:
        label: "{{ item.key }} in {{ current_datacenter }}"

    - name: Display setup information for this datacenter
      debug:
        msg: |
          Redis connection strings stored in {{ current_datacenter }}
          Keys: redis/connection_string/haproxy, redis/port/haproxy, redis/password, redis/enabled