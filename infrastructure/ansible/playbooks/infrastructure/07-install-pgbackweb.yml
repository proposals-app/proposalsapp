---
# Install and configure pgbackweb for PostgreSQL backups
# Installs pgbackweb on its own dedicated LXC container

- name: Install and configure pgbackweb
  hosts: pgbackweb
  become: true
  vars:
    pgbackweb_version: "latest"
    pgbackweb_port: 8085
    pgbackweb_data_dir: "/opt/pgbackweb"
    pgbackweb_backup_dir: "/backups/pgbackweb"
    pgbackweb_db_password: "{{ vault_pgbackweb_db_password | default('pgbackweb_secure_' + lookup('password', '/dev/null chars=ascii_letters,digits length=16')) }}"
    pgbackweb_encryption_key: "{{ vault_pgbackweb_encryption_key }}"
    postgres_user: "{{ vault_postgres_user }}"
    postgres_password: "{{ vault_postgres_password }}"
    pgbackweb_postgres_database: "pgbackweb"

  tasks:
    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose
          - postgresql-client
          - python3-psycopg2
        state: present
        update_cache: yes

    - name: Create pgbackweb directories
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ pgbackweb_data_dir }}"
        - "{{ pgbackweb_backup_dir }}"
        - "/var/log/pgbackweb"

    # pgbackweb now uses its own PostgreSQL container, no need to create database in main cluster

    - name: Create docker-compose file for pgbackweb
      template:
        src: ../../templates/pgbackweb-docker-compose.yml.j2
        dest: "{{ pgbackweb_data_dir }}/docker-compose.yml"
        owner: root
        group: root
        mode: '0644'

    # Environment variables are now defined directly in docker-compose.yml


    - name: Pull pgbackweb Docker image
      docker_image:
        name: "eduardolat/pgbackweb:{{ pgbackweb_version }}"
        source: pull
        state: present

    - name: Install netcat for service dependency check
      apt:
        name: netcat-openbsd
        state: present

    - name: Create systemd service for pgbackweb
      template:
        src: ../../templates/pgbackweb.service.j2
        dest: /etc/systemd/system/pgbackweb.service
        owner: root
        group: root
        mode: '0644'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Stop any existing pgbackweb container
      shell: |
        cd {{ pgbackweb_data_dir }}
        docker-compose down || true
      args:
        chdir: "{{ pgbackweb_data_dir }}"
      ignore_errors: yes

    - name: Enable and start pgbackweb service
      systemd:
        name: pgbackweb
        enabled: yes
        state: started

    - name: Wait for pgbackweb to be ready
      wait_for:
        port: "{{ pgbackweb_port }}"
        host: localhost
        delay: 10
        timeout: 60
    
    - name: Wait for pgbackweb application to be fully ready
      uri:
        url: "http://localhost:{{ pgbackweb_port }}/auth/create-first-user"
        method: GET
        status_code: [200, 302]
      register: result
      until: result.status in [200, 302]
      retries: 12
      delay: 5


    - name: Create initial admin user in pgbackweb
      shell: |
        # Wait a bit more for schema initialization
        sleep 10
        
        # Create admin user with bcrypt hashed password 'wxh5ztn1cyv8qbk@VEX'
        docker exec pgbackweb-db psql -U pgbackweb -d pgbackweb -c "
          INSERT INTO users (name, email, password) 
          VALUES ('Andrei V', 'contact@andreiv.com', '\$2b\$10\$9VzkBnBTbOL9y3xJKeofOucts2b8WvRttHBnAvlUyknCI4Hs3x8TW') 
          ON CONFLICT (email) DO UPDATE SET password = '\$2b\$10\$9VzkBnBTbOL9y3xJKeofOucts2b8WvRttHBnAvlUyknCI4Hs3x8TW';
        " || echo "User creation might have failed - database might not be initialized yet"
      register: create_user_result
      ignore_errors: yes


    - name: Install ufw if not present
      apt:
        name: ufw
        state: present
      ignore_errors: yes

    - name: Configure firewall for pgbackweb
      ufw:
        rule: allow
        port: "{{ pgbackweb_port }}"
        proto: tcp
        comment: "pgbackweb UI"
      ignore_errors: yes

    - name: Create scripts directory
      file:
        path: /usr/local/bin
        state: directory
        owner: root
        group: root
        mode: '0755'


    - name: Display pgbackweb access information
      debug:
        msg:
          - "pgbackweb has been installed successfully!"
          - "Access the UI at: http://{{ ansible_default_ipv4.address }}:{{ pgbackweb_port }}"
          - "Create an account on first access"
          - "Configure databases, destinations, and backup schedules through the web UI"
          - ""
