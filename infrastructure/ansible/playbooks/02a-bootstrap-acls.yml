---
- name: Bootstrap ACLs for Consul and Nomad
  hosts: consul_servers[0]
  become: true
  tasks:
    # ========================================
    # Consul ACL Bootstrap
    # ========================================
    - name: Wait for Consul to be ready
      uri:
        url: "http://127.0.0.1:8500/v1/status/leader"
      register: consul_leader_check
      until: consul_leader_check.status == 200 and consul_leader_check.json != ""
      retries: 30
      delay: 2

    - name: Check for existing Consul bootstrap token
      stat:
        path: /root/consul-bootstrap.json
      register: consul_bootstrap_exists

    - name: Bootstrap Consul ACLs
      shell: consul acl bootstrap -format=json
      register: consul_bootstrap_result
      when:
        - consul_acl_enabled | default(true) | bool
        - not consul_bootstrap_exists.stat.exists
      failed_when:
        - consul_bootstrap_result.rc != 0
        - '"ACL bootstrap already done" not in consul_bootstrap_result.stderr'

    - name: Save Consul bootstrap token
      copy:
        content: "{{ consul_bootstrap_result.stdout }}"
        dest: /root/consul-bootstrap.json
        mode: "0600"
        owner: root
        group: root
      when:
        - consul_bootstrap_result is defined
        - consul_bootstrap_result.changed

    - name: Read Consul bootstrap token
      slurp:
        src: /root/consul-bootstrap.json
      register: consul_bootstrap_file
      when: consul_acl_enabled | default(true) | bool

    - name: Extract Consul management token
      set_fact:
        consul_mgmt_token: "{{ (consul_bootstrap_file.content | b64decode | from_json).SecretID }}"
      when:
        - consul_acl_enabled | default(true) | bool
        - consul_bootstrap_file is defined

    # ========================================
    # Create Consul Agent Tokens
    # ========================================
    - name: Create Consul agent policy
      shell: |
        consul acl policy create \
          -name "agent-policy" \
          -description "Agent policy for Consul agents" \
          -rules @- <<EOF
        node_prefix "" {
          policy = "write"
        }
        service_prefix "" {
          policy = "read"
        }
        agent_prefix "" {
          policy = "write"
        }
        EOF
      environment:
        CONSUL_HTTP_TOKEN: "{{ consul_mgmt_token }}"
      register: agent_policy_result
      failed_when:
        - agent_policy_result.rc != 0
        - '"already exists" not in agent_policy_result.stderr'
      when: consul_acl_enabled | default(true) | bool

    - name: Create Consul agent tokens for all nodes
      shell: |
        consul acl token create \
          -description "Agent token for {{ item }}" \
          -policy-name "agent-policy" \
          -format=json
      environment:
        CONSUL_HTTP_TOKEN: "{{ consul_mgmt_token }}"
      register: agent_tokens
      with_items: "{{ groups['all'] }}"
      when: consul_acl_enabled | default(true) | bool

    - name: Save agent tokens
      copy:
        content: "{{ item.stdout }}"
        dest: "/root/consul-agent-token-{{ item.item }}.json"
        mode: "0600"
      with_items: "{{ agent_tokens.results }}"
      when:
        - consul_acl_enabled | bool
        - item.changed is defined
        - item.changed

    # ========================================
    # Nomad ACL Bootstrap (if enabled)
    # ========================================
    - name: Wait for Nomad to be ready
      uri:
        url: "http://127.0.0.1:4646/v1/status/leader"
        headers:
          X-Nomad-Token: ""
      register: nomad_leader_check
      until: nomad_leader_check.status == 200 and nomad_leader_check.json != ""
      retries: 30
      delay: 2
      when: nomad_acl_enabled | default(false) | bool

    - name: Check for existing Nomad bootstrap token
      stat:
        path: /root/nomad-bootstrap.json
      register: nomad_bootstrap_exists

    - name: Bootstrap Nomad ACLs
      shell: |
        export CONSUL_HTTP_TOKEN="{{ consul_mgmt_token }}"
        nomad acl bootstrap -json
      register: nomad_bootstrap_result
      when:
        - nomad_acl_enabled | default(false) | bool
        - not nomad_bootstrap_exists.stat.exists
      failed_when:
        - nomad_bootstrap_result.rc != 0
        - '"ACL bootstrap already done" not in nomad_bootstrap_result.stderr'
        - '"bootstrap already completed" not in nomad_bootstrap_result.stderr'

    - name: Save Nomad bootstrap token
      copy:
        content: "{{ nomad_bootstrap_result.stdout }}"
        dest: /root/nomad-bootstrap.json
        mode: "0600"
        owner: root
        group: root
      when:
        - nomad_bootstrap_result is defined
        - nomad_bootstrap_result.changed

    - name: Read Nomad bootstrap token
      slurp:
        src: /root/nomad-bootstrap.json
      register: nomad_bootstrap_file
      when:
        - nomad_acl_enabled | default(false) | bool
        - nomad_bootstrap_exists.stat.exists or nomad_bootstrap_result.changed

    - name: Extract Nomad management token
      set_fact:
        nomad_mgmt_token: "{{ (nomad_bootstrap_file.content | b64decode | from_json).SecretID }}"
      when:
        - nomad_acl_enabled | default(false) | bool
        - nomad_bootstrap_file is defined

    # ========================================
    # Create Nomad Agent Tokens
    # ========================================
    - name: Create Nomad agent policy
      shell: |
        cat > /tmp/nomad-agent-policy.hcl <<EOF
        agent {
          policy = "write"
        }
        node {
          policy = "write"
        }
        EOF
        nomad acl policy apply \
          -description "Agent policy for Nomad agents" \
          agent-policy /tmp/nomad-agent-policy.hcl
      environment:
        NOMAD_TOKEN: "{{ nomad_mgmt_token }}"
      register: nomad_agent_policy_result
      failed_when:
        - nomad_agent_policy_result.rc != 0
        - '"already exists" not in nomad_agent_policy_result.stderr'
      when: nomad_acl_enabled | default(false) | bool

    - name: Create Nomad agent tokens for server nodes
      shell: |
        nomad acl token create \
          -name "Agent token for {{ item }}" \
          -policy "agent-policy" \
          -type "client" \
          -json
      environment:
        NOMAD_TOKEN: "{{ nomad_mgmt_token }}"
      register: nomad_agent_tokens
      with_items: "{{ groups['nomad_servers'] }}"
      when: nomad_acl_enabled | default(false) | bool

    - name: Save Nomad agent tokens
      copy:
        content: "{{ item.stdout }}"
        dest: "/root/nomad-agent-token-{{ item.item }}.json"
        mode: "0600"
      with_items: "{{ nomad_agent_tokens.results }}"
      when:
        - nomad_acl_enabled | default(false) | bool
        - item.changed is defined
        - item.changed

    # ========================================
    # Summary
    # ========================================
    - name: Display ACL bootstrap summary
      debug:
        msg: |
          ========================================
          ACL Bootstrap Complete
          ========================================
          Consul ACL: {{ 'Enabled and bootstrapped' if consul_acl_enabled else 'Disabled' }}
          Nomad ACL: {{ 'Enabled and bootstrapped' if nomad_acl_enabled else 'Disabled' }}

          Bootstrap tokens saved to:
          - /root/consul-bootstrap.json
          - /root/nomad-bootstrap.json

          Agent tokens created for all nodes.
          ========================================
