---
# Gather facts from all hosts first
- name: Gather facts from all hosts
  hosts: all
  gather_facts: true
  tasks:
    - name: Set connection to use tailscale IP if available
      set_fact:
        ansible_host: "{{ tailscale_ip }}"
      when: tailscale_ip is defined and tailscale_ip != ''

# Ensure we have facts from servers before configuring clients
- name: Refresh facts for consul servers
  hosts: consul_servers
  gather_facts: true
  tasks:
    - name: Set connection to use tailscale IP if available
      set_fact:
        ansible_host: "{{ tailscale_ip }}"
      when: tailscale_ip is defined and tailscale_ip != ''

- name: Install and Configure Consul
  hosts: consul_servers
  become: true
  gather_facts: false
  tasks:
    - name: Install required packages
      apt:
        name:
          - consul
        state: present

    - name: Fix Consul directory permissions
      file:
        path: "{{ item }}"
        state: directory
        owner: consul
        group: consul
        mode: "0755"
      loop:
        - /var/lib/consul
        - /opt/consul
        - /etc/consul

    - name: Generate Consul CA
      shell: consul tls ca create
      args:
        creates: /opt/consul/consul-agent-ca.pem
        chdir: /opt/consul
      run_once: true
      delegate_to: consul-nomad-sib-01

    - name: Generate Consul server certificates
      shell: |
        consul tls cert create -server -dc {{ datacenter }} \
          -additional-dnsname={{ inventory_hostname }}.consul
      args:
        creates: /opt/consul/{{ datacenter }}-server-consul-0.pem
        chdir: /opt/consul
      delegate_to: consul-nomad-sib-01

    - name: Fetch CA cert from primary server
      fetch:
        src: /opt/consul/consul-agent-ca.pem
        dest: /tmp/consul-ca/
        flat: yes
      run_once: true
      delegate_to: consul-nomad-sib-01

    - name: Distribute CA cert to all servers
      copy:
        src: /tmp/consul-ca/consul-agent-ca.pem
        dest: /opt/consul/consul-agent-ca.pem
        owner: consul
        group: consul
        mode: "0644"

    - name: Create Consul config directory
      file:
        path: /etc/consul.d
        state: directory
        owner: consul
        group: consul
        mode: "0755"

    - name: Create Consul server configuration
      template:
        src: ../templates/consul-server.hcl.j2
        dest: /etc/consul.d/consul.hcl
        owner: consul
        group: consul
        mode: "0640"
      notify: restart consul

    - name: Create systemd service directory
      file:
        path: /etc/systemd/system/consul.service.d
        state: directory
        mode: "0755"

    - name: Create Consul systemd service override
      copy:
        content: |
          [Service]
          Type=simple
          Environment="CONSUL_CACERT=/opt/consul/consul-agent-ca.pem"
          Environment="CONSUL_CLIENT_CERT=/opt/consul/{{ datacenter }}-server-consul-0.pem"
          Environment="CONSUL_CLIENT_KEY=/opt/consul/{{ datacenter }}-server-consul-0-key.pem"
          TimeoutStartSec=0
          Restart=on-failure
          RestartSec=5
        dest: /etc/systemd/system/consul.service.d/override.conf
      notify:
        - reload systemd
        - restart consul

    - name: Bootstrap primary datacenter first
      block:
        - name: Reload systemd and start Consul on primary DC
          systemd:
            name: consul
            state: started
            enabled: yes
            daemon_reload: yes

        - name: Wait for primary DC to be ready
          wait_for:
            port: 8500
            host: "{{ tailscale_ip | default(ansible_tailscale0.ipv4.address | default(ansible_default_ipv4.address)) }}"
            delay: 5
            timeout: 60
      when: datacenter == "dc1"

    - name: Start Consul on secondary datacenters
      block:
        - name: Find primary DC server
          set_fact:
            primary_dc_ip: "{{ hostvars[item].tailscale_ip | default(hostvars[item].ansible_tailscale0.ipv4.address | default(hostvars[item].ansible_default_ipv4.address)) }}"
          loop: "{{ groups['consul_servers'] }}"
          when:
            - hostvars[item]['datacenter'] == "dc1"
            - datacenter != "dc1"

        - name: Wait for primary DC to be up
          wait_for:
            port: 8302
            host: "{{ primary_dc_ip }}"
            delay: 10
            timeout: 60
          when:
            - datacenter != "dc1"
            - primary_dc_ip is defined

        - name: Start Consul on secondary DCs
          systemd:
            name: consul
            state: started
            enabled: yes
            daemon_reload: yes

        - name: Wait for Consul to be ready
          wait_for:
            port: 8500
            host: "{{ tailscale_ip | default(ansible_tailscale0.ipv4.address | default(ansible_default_ipv4.address)) }}"
            delay: 5
            timeout: 60
      when: datacenter != "dc1"

    - name: Bootstrap Consul ACL system first
      shell: consul acl bootstrap -format=json
      register: consul_bootstrap_result
      when:
        - consul_acl_enabled | default(true)
        - datacenter == "dc1"
      run_once: true
      ignore_errors: true

    - name: Save bootstrap token immediately
      copy:
        content: "{{ consul_bootstrap_result.stdout }}"
        dest: /root/consul-bootstrap.json
        mode: "0600"
      when:
        - consul_acl_enabled | default(true)
        - datacenter == "dc1"
        - consul_bootstrap_result is defined
        - consul_bootstrap_result is succeeded
        - consul_bootstrap_result.stdout is defined
        - consul_bootstrap_result.stdout != ""
      run_once: true

    - name: Establish WAN federation from primary DC
      shell: |
        {% if consul_acl_enabled | default(true) %}
        if [ -f /root/consul-bootstrap.json ]; then
          export CONSUL_HTTP_TOKEN=$(cat /root/consul-bootstrap.json | grep -o '"SecretID":"[^"]*' | cut -d'"' -f4)
        fi
        {% endif %}
        {% for host in groups['consul_servers'] %}
        {% if hostvars[host]['datacenter'] != "dc1" %}
        {% set host_ip = hostvars[host].tailscale_ip | default(hostvars[host].ansible_tailscale0.ipv4.address | default(hostvars[host].ansible_default_ipv4.address)) %}
        consul join -wan {{ host_ip }}:8302
        {% endif %}
        {% endfor %}
      when: datacenter == "dc1"
      run_once: true
      ignore_errors: true

    - name: Create anonymous token policy for basic operations
      shell: |
        if [ -f /root/consul-bootstrap.json ]; then
          export CONSUL_HTTP_TOKEN=$(cat /root/consul-bootstrap.json | grep -o '"SecretID":"[^"]*' | cut -d'"' -f4)
          
          # Create policy for anonymous token to allow basic read operations
          consul acl policy create -name "anonymous-read" -rules 'node_prefix "" { policy = "read" } service_prefix "" { policy = "read" }' || true
          
          # Update anonymous token
          consul acl token update -id anonymous -policy-name anonymous-read || true
        fi
      when:
        - consul_acl_enabled | default(true)
        - datacenter == "dc1"
      run_once: true
      ignore_errors: true

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart consul
      systemd:
        name: consul
        state: restarted

- name: Configure Consul Clients
  hosts: nomad_clients
  become: true
  gather_facts: false
  tasks:
    - name: Install required packages
      apt:
        name:
          - consul
        state: present

    - name: Fix Consul directory permissions
      file:
        path: "{{ item }}"
        state: directory
        owner: consul
        group: consul
        mode: "0755"
      loop:
        - /var/lib/consul
        - /opt/consul
        - /etc/consul

    - name: Fetch CA cert from server
      fetch:
        src: /opt/consul/consul-agent-ca.pem
        dest: /tmp/consul-ca/
        flat: yes
      delegate_to: consul-nomad-sib-01
      run_once: true

    - name: Copy CA cert to clients
      copy:
        src: /tmp/consul-ca/consul-agent-ca.pem
        dest: /opt/consul/consul-agent-ca.pem
        owner: consul
        group: consul
        mode: "0644"

    - name: Create Consul config directory
      file:
        path: /etc/consul.d
        state: directory
        owner: consul
        group: consul
        mode: "0755"

    - name: Create Consul client configuration
      template:
        src: ../templates/consul-client.hcl.j2
        dest: /etc/consul.d/consul.hcl
        owner: consul
        group: consul
        mode: "0640"
      notify: restart consul

    - name: Create systemd service directory for clients
      file:
        path: /etc/systemd/system/consul.service.d
        state: directory
        mode: "0755"

    - name: Create Consul systemd service override for clients
      copy:
        content: |
          [Service]
          Type=simple
          TimeoutStartSec=0
          Restart=on-failure
          RestartSec=5
        dest: /etc/systemd/system/consul.service.d/override.conf
      notify:
        - reload systemd
        - restart consul

    - name: Reload systemd and start Consul
      systemd:
        name: consul
        state: started
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart consul
      systemd:
        name: consul
        state: restarted
