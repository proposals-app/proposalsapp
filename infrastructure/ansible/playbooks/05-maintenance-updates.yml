---
- name: Perform Maintenance Updates on All Systems
  hosts: all
  become: true
  serial: "50%" # Update 50% of hosts at a time
  max_fail_percentage: 30 # Stop if more than 30% of hosts fail
  tasks:
    - name: Set connection to use tailscale IP if available
      set_fact:
        ansible_host: "{{ tailscale_ip }}"
      when: tailscale_ip is defined and tailscale_ip != ''

    - name: Update package cache (Debian/Ubuntu)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Upgrade all packages to latest version
      apt:
        upgrade: safe
        autoremove: yes
        autoclean: yes
      when: ansible_os_family == "Debian"
      register: apt_upgrade

    - name: Check if reboot is required (Debian/Ubuntu)
      stat:
        path: /var/run/reboot-required
      register: reboot_required
      when: ansible_os_family == "Debian"

    - name: Display upgrade results
      debug:
        msg: |
          Host: {{ inventory_hostname }}
          Packages upgraded: {{ apt_upgrade.changed | default(false) }}
          Reboot required: {{ reboot_required.stat.exists | default(false) }}
      when: ansible_os_family == "Debian"

    - name: Clean up old kernels and packages
      shell: |
        apt-get autoremove --purge -y
        apt-get clean
      when: ansible_os_family == "Debian"
      changed_when: false

- name: Update HashiCorp Services
  hosts: consul_servers:nomad_servers:nomad_clients
  become: true
  serial: 1 # Update one at a time for critical services
  tasks:
    - name: Set connection to use tailscale IP if available
      set_fact:
        ansible_host: "{{ tailscale_ip }}"
      when: tailscale_ip is defined and tailscale_ip != ''

    - name: Check Consul version
      shell: consul version | head -1
      register: consul_version
      changed_when: false
      ignore_errors: true

    - name: Check Nomad version
      shell: nomad version | head -1
      register: nomad_version
      changed_when: false
      ignore_errors: true

    - name: Display service versions
      debug:
        msg: |
          Host: {{ inventory_hostname }}
          Consul: {{ consul_version.stdout | default('Not installed') }}
          Nomad: {{ nomad_version.stdout | default('Not installed') }}

- name: Update Database Servers
  hosts: postgres_nodes
  become: true
  serial: 1 # Update one database at a time
  tasks:
    - name: Set connection to use tailscale IP if available
      set_fact:
        ansible_host: "{{ tailscale_ip }}"
      when: tailscale_ip is defined and tailscale_ip != ''

    - name: Check PostgreSQL version
      become_user: postgres
      postgresql_info:
        filter: version
      register: pg_info
      ignore_errors: true

    - name: Display PostgreSQL version
      debug:
        msg: |
          Host: {{ inventory_hostname }}
          PostgreSQL: {{ pg_info.version.server | default('Not installed') }}
      when: pg_info is succeeded

    - name: Update PostgreSQL extensions
      become_user: postgres
      shell: |
        psql -d {{ postgres_database }} -c "SELECT * FROM pg_available_extensions WHERE default_version != installed_version;"
      register: outdated_extensions
      changed_when: false
      ignore_errors: true

    - name: Display outdated extensions
      debug:
        msg: "{{ outdated_extensions.stdout_lines }}"
      when: outdated_extensions is succeeded and outdated_extensions.stdout_lines | length > 1

- name: Summary Report
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Generate maintenance report
      debug:
        msg: |
          ========================================
          Maintenance Update Complete
          ========================================

          Total hosts updated: {{ groups['all'] | length }}

          Next steps:
          1. Review any hosts that require reboot
          2. Plan maintenance window for reboots if needed
          3. Check service health after updates

          To reboot hosts that require it:
          ansible <host> -m reboot -b
          ========================================
