---
- name: Distribute ACL Tokens to All Nodes
  hosts: all
  become: true
  vars:
    consul_acl_enabled: "{{ consul_acl_enabled | default(true) }}"
    nomad_acl_enabled: "{{ nomad_acl_enabled | default(false) }}"
  tasks:
    # ========================================
    # Consul Token Distribution
    # ========================================
    - name: Check if Consul agent token exists for this host
      stat:
        path: "/root/consul-agent-token-{{ inventory_hostname }}.json"
      delegate_to: "{{ groups['consul_servers'][0] }}"
      register: consul_agent_token_exists
      when: consul_acl_enabled | bool

    - name: Fetch Consul agent token from bootstrap server
      fetch:
        src: "/root/consul-agent-token-{{ inventory_hostname }}.json"
        dest: "/tmp/consul-tokens/"
        flat: no
      delegate_to: "{{ groups['consul_servers'][0] }}"
      when:
        - consul_acl_enabled | bool
        - consul_agent_token_exists.stat.exists

    - name: Copy Consul agent token to node
      copy:
        src: "/tmp/consul-tokens/{{ groups['consul_servers'][0] }}/root/consul-agent-token-{{ inventory_hostname }}.json"
        dest: "/etc/consul.d/agent-token.json"
        owner: consul
        group: consul
        mode: "0600"
      when:
        - consul_acl_enabled | bool
        - consul_agent_token_exists.stat.exists

    - name: Extract Consul agent token
      shell: |
        cat /etc/consul.d/agent-token.json | python3 -c "import sys, json; print(json.load(sys.stdin)['SecretID'])"
      register: consul_agent_token_result
      when:
        - consul_acl_enabled | bool
        - consul_agent_token_exists.stat.exists
      changed_when: false

    - name: Update Consul systemd override with agent token
      copy:
        content: |
          [Service]
          Type=simple
          {% if inventory_hostname in groups['consul_servers'] %}
          Environment="CONSUL_CACERT=/opt/consul/consul-agent-ca.pem"
          Environment="CONSUL_CLIENT_CERT=/opt/consul/{{ datacenter }}-server-consul-0.pem"
          Environment="CONSUL_CLIENT_KEY=/opt/consul/{{ datacenter }}-server-consul-0-key.pem"
          {% endif %}
          Environment="CONSUL_HTTP_TOKEN={{ consul_agent_token_result.stdout }}"
          TimeoutStartSec=0
          Restart=on-failure
          RestartSec=5
        dest: /etc/systemd/system/consul.service.d/override.conf
      when:
        - consul_acl_enabled | bool
        - consul_agent_token_result is defined
        - consul_agent_token_result.stdout is defined
      notify:
        - reload systemd
        - restart consul

    # ========================================
    # Nomad Token Distribution (for servers)
    # ========================================
    - name: Check if Nomad agent token exists for this host
      stat:
        path: "/root/nomad-agent-token-{{ inventory_hostname }}.json"
      delegate_to: "{{ groups['consul_servers'][0] }}"
      register: nomad_agent_token_exists
      when:
        - nomad_acl_enabled | bool
        - inventory_hostname in groups['nomad_servers']

    - name: Fetch Nomad agent token from bootstrap server
      fetch:
        src: "/root/nomad-agent-token-{{ inventory_hostname }}.json"
        dest: "/tmp/nomad-tokens/"
        flat: no
      delegate_to: "{{ groups['consul_servers'][0] }}"
      when:
        - nomad_acl_enabled | bool
        - inventory_hostname in groups['nomad_servers']
        - nomad_agent_token_exists.stat.exists

    - name: Copy Nomad agent token to server node
      copy:
        src: "/tmp/nomad-tokens/{{ groups['consul_servers'][0] }}/root/nomad-agent-token-{{ inventory_hostname }}.json"
        dest: "/etc/nomad.d/agent-token.json"
        owner: nomad
        group: nomad
        mode: "0600"
      when:
        - nomad_acl_enabled | bool
        - inventory_hostname in groups['nomad_servers']
        - nomad_agent_token_exists.stat.exists

    - name: Extract Nomad agent token
      shell: |
        cat /etc/nomad.d/agent-token.json | python3 -c "import sys, json; print(json.load(sys.stdin)['SecretID'])"
      register: nomad_agent_token_result
      when:
        - nomad_acl_enabled | bool
        - inventory_hostname in groups['nomad_servers']
        - nomad_agent_token_exists.stat.exists
      changed_when: false

    - name: Update Nomad systemd override with agent token
      copy:
        content: |
          [Service]
          Environment="CONSUL_HTTP_ADDR=http://127.0.0.1:{{ consul_client_port }}"
          {% if consul_acl_enabled | bool and consul_agent_token_result is defined %}
          Environment="CONSUL_HTTP_TOKEN={{ consul_agent_token_result.stdout }}"
          {% endif %}
          {% if nomad_acl_enabled | bool and nomad_agent_token_result is defined %}
          Environment="NOMAD_TOKEN={{ nomad_agent_token_result.stdout }}"
          {% endif %}
        dest: /etc/systemd/system/nomad.service.d/override.conf
      when:
        - inventory_hostname in groups['nomad_servers'] or inventory_hostname in groups['nomad_clients']
      notify:
        - reload systemd
        - restart nomad

    # ========================================
    # Summary
    # ========================================
    - name: Display token distribution summary
      debug:
        msg: |
          ========================================
          Token Distribution Complete for {{ inventory_hostname }}
          ========================================
          Consul Token: {{ 'Distributed' if (consul_acl_enabled | bool and consul_agent_token_result is defined) else 'Not required' }}
          Nomad Token: {{ 'Distributed' if (nomad_acl_enabled | bool and nomad_agent_token_result is defined) else 'Not required' }}
          ========================================
      run_once: false

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart consul
      systemd:
        name: consul
        state: restarted
      when: "'consul' in ansible_facts.services"

    - name: restart nomad
      systemd:
        name: nomad
        state: restarted
      when: "'nomad' in ansible_facts.services"
