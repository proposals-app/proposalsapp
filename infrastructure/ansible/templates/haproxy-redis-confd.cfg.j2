{% raw %}global
    maxconn 4096
    log /dev/log local0
    log /dev/log local1 notice
    stats socket /var/run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    log     global
    mode    tcp
    option  tcplog
    option  dontlognull
    timeout connect 5000
    timeout client  30000
    timeout server  30000
    timeout check   2000
    retries 3

# Stats interface
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE

# Redis frontend - applications connect here
frontend redis_frontend
    bind *:6380
    mode tcp
    option tcplog
    
    # ACL to detect write commands
    tcp-request inspect-delay 100ms
    tcp-request content accept if WAIT_END
    
    # Route based on command type
    acl is_write_cmd payload(0,7) -m str -i MULTI EXEC DISCARD
    acl is_write_cmd payload(0,6) -m str -i SELECT FLUSHDB FLUSHALL
    acl is_write_cmd payload(0,5) -m str -i WATCH UNWATCH
    acl is_write_cmd payload(0,4) -m str -i SET DEL INCR DECR LPUSH RPUSH SADD SREM ZADD ZREM HSET HDEL
    acl is_write_cmd payload(0,3) -m str -i APPEND SETEX PSETEX SETNX GETSET
    
    # Use write backend for write commands, read backend for everything else
    use_backend redis_write if is_write_cmd
    default_backend redis_read

# Write backend - always goes to master
backend redis_write
    mode tcp
    option tcp-check
    tcp-check send AUTH\ {{getv "/service/redis/password" "proposalsapp_redis_password"}}\r\n
    tcp-check expect string +OK
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    
    # Master server from etcd
    {{$master := getv "/service/redis/master" ""}}
    {{if $master}}
    {{$parts := split $master ":"}}
    server redis-master {{index $parts 0}}:{{index $parts 1}} check inter 2s rise 2 fall 3
    {{else}}
    # Fallback: check all Redis instances for master
    {{range gets "/service/redis/instances/*"}}
    {{$data := json .Value}}
    {{if eq $data.role "master"}}
    server {{$data.name}} {{$data.host}}:{{$data.port}} check inter 2s rise 2 fall 3
    {{end}}
    {{end}}
    {{end}}

# Read backend - prefer local replica with weight-based routing
backend redis_read
    mode tcp
    balance roundrobin
    option tcp-check
    tcp-check send AUTH\ {{getv "/service/redis/password" "proposalsapp_redis_password"}}\r\n
    tcp-check expect string +OK
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    
    # Local datacenter gets higher weight (10x)
    # This achieves ~90% local reads when local Redis is available
    {{$local_dc := getenv "LOCAL_DATACENTER"}}
    {{range gets "/service/redis/instances/*"}}
    {{$data := json .Value}}
    {{if eq $data.datacenter $local_dc}}
    server {{$data.name}} {{$data.host}}:{{$data.port}} check inter 2s rise 2 fall 3 weight 10
    {{else}}
    server {{$data.name}} {{$data.host}}:{{$data.port}} check inter 2s rise 2 fall 3 weight 1
    {{end}}
    {{end}}

# Redis Sentinel frontend for monitoring
frontend redis_sentinel_frontend
    bind *:26380
    mode tcp
    default_backend redis_sentinel

# Sentinel backend
backend redis_sentinel
    mode tcp
    balance roundrobin
    option tcp-check
    tcp-check connect
    
    {{range gets "/service/redis-sentinel/instances/*"}}
    {{$data := json .Value}}
    server {{$data.name}} {{$data.host}}:{{$data.port}} check inter 2s rise 2 fall 3
    {{end}}{% endraw %}