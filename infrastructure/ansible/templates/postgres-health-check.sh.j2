#!/bin/bash
# PostgreSQL Comprehensive Health Check Script
# Purpose: Performs deep health checks on PostgreSQL nodes to verify
#          replication status, lag, and overall cluster health.
#
# Why this script exists:
# - Patroni's cluster view can be incomplete in multi-DC setups
# - Network partitions may cause inconsistent cluster state views
# - Direct PostgreSQL queries provide ground truth about replication
#
# Usage:
# - Run manually for troubleshooting: ./postgres-health-check.sh
# - Can be integrated into monitoring systems
# - Useful during maintenance windows
#
# Exit codes:
# - 0: Healthy
# - 1: Service down or connection failure

set -e  # Exit on error

# Set PostgreSQL password for authentication
PGPASSWORD="{{ postgres_password }}"
export PGPASSWORD

# Display header with node information
echo "=== PostgreSQL Node Health Check ==="
echo "Node: {{ inventory_hostname }}"
echo "Datacenter: {{ datacenter }}"
echo ""

# Step 1: Verify PostgreSQL service is running
# Check both direct PostgreSQL and Patroni-managed services
if ! systemctl is-active --quiet postgresql@17-main.service && ! systemctl is-active --quiet patroni.service; then
    echo "ERROR: PostgreSQL/Patroni service is not running"
    exit 1
fi

# Step 2: Test database connectivity
# Simple query to verify we can connect and execute commands
if ! psql -h localhost -U postgres -d postgres -c "SELECT 1;" >/dev/null 2>&1; then
    echo "ERROR: Cannot connect to PostgreSQL"
    exit 1
fi

# Step 3: Determine node role (primary or replica)
# pg_is_in_recovery() returns true for replicas, false for primary
is_primary=$(psql -h localhost -U postgres -d postgres -t -c "SELECT NOT pg_is_in_recovery();" | tr -d ' ')

if [ "$is_primary" = "t" ]; then
    echo "Role: PRIMARY"
    
    # PRIMARY-SPECIFIC CHECKS
    
    # Display connected replicas and their replication status
    echo ""
    echo "Replication Status:"
    psql -h localhost -U postgres -d postgres -c "
    SELECT client_addr, state, sync_state, replay_lsn 
    FROM pg_stat_replication 
    ORDER BY client_addr;"
    
    # Check for replicas with excessive lag
    # Threshold: 1GB of WAL lag indicates potential issues
    lag_check=$(psql -h localhost -U postgres -d postgres -t -c "
    SELECT COUNT(*) 
    FROM pg_stat_replication 
    WHERE replay_lsn < pg_current_wal_lsn() - '1GB'::pg_lsn;" | tr -d ' ')
    
    if [ "$lag_check" -gt 0 ]; then
        echo "WARNING: $lag_check replica(s) are lagging more than 1GB"
    fi
else
    echo "Role: REPLICA"
    
    # REPLICA-SPECIFIC CHECKS
    
    # Display replication receive and replay status
    echo ""
    echo "Replication Status:"
    psql -h localhost -U postgres -d postgres -c "
    SELECT pg_is_in_recovery() as in_recovery,
           pg_last_wal_receive_lsn() as receive_lsn,
           pg_last_wal_replay_lsn() as replay_lsn,
           CASE 
             WHEN pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn() 
             THEN 'Synchronized' 
             ELSE 'Replaying' 
           END as status;"
    
    # Show primary connection information
    # This helps verify the replica is connected to the correct primary
    primary_conninfo=$(psql -h localhost -U postgres -d postgres -t -c "SHOW primary_conninfo;" | tr -d ' ')
    if [ -n "$primary_conninfo" ]; then
        echo ""
        echo "Connected to primary via: $primary_conninfo"
    fi
fi

# Step 4: Display Patroni's cluster view
# Note: In multi-DC setups, Patroni may not see all nodes due to:
# - etcd's eventual consistency across WAN
# - Network partitions between datacenters
# - Timing of etcd key updates
# This is why we perform direct PostgreSQL checks above
echo ""
echo "Patroni Cluster View (may be incomplete due to cross-DC sync):"
if command -v patronictl >/dev/null 2>&1; then
    /var/lib/postgresql/.local/bin/patronictl -c /etc/patroni/patroni.yml list 2>/dev/null || echo "Patroni view unavailable"
fi

# Summary
echo ""
echo "=== Health Check Complete ==="