#!/bin/bash
# Consul WAN Federation Health Check and Auto-Repair Script
# Purpose: Monitors Consul WAN federation status and automatically repairs
#          broken federation by restarting the local Consul service.
#
# Problem this solves:
# - Consul WAN federation can break during extended network outages
# - After 72 hours, Consul automatically removes inactive WAN members
# - Manual intervention is typically required to rejoin the WAN pool
# - This script automates the recovery process
#
# How it works:
# 1. Runs every 5 minutes via systemd timer
# 2. Checks if all expected datacenters are present in WAN pool
# 3. If federation is broken, attempts to restart Consul (with limits)
# 4. Implements cooldown periods to prevent restart loops
# 5. Logs all actions for troubleshooting
#
# Protection mechanisms:
# - Maximum 3 restart attempts per 10-minute window
# - 10-minute cooldown between restart attempts
# - State tracking survives script restarts
# - Only runs on Consul server nodes

set -euo pipefail

# Configuration Parameters
EXPECTED_WAN_MEMBERS={{ groups['consul_servers'] | length }}  # Should be 3 (one per DC)
LOG_TAG="consul-wan-health"
CONSUL_SERVICE="consul"
CHECK_INTERVAL=300      # 5 minutes between checks
MAX_RESTART_ATTEMPTS=3  # Maximum restarts in time window
RESTART_COOLDOWN=600    # 10 minutes between restart attempts

# State Management
# Tracks restart attempts to prevent service flapping
STATE_DIR="/var/lib/consul/health-check"
STATE_FILE="${STATE_DIR}/wan-health.state"
mkdir -p "${STATE_DIR}"

# Logging Function
# Uses system logger for integration with journald
log() {
    local level=$1
    shift
    logger -t "${LOG_TAG}" -p "daemon.${level}" "$@"
}

# State Management Functions
# These functions handle persistent state across script runs
get_last_restart() {
    if [[ -f "${STATE_FILE}" ]]; then
        grep "last_restart" "${STATE_FILE}" | cut -d'=' -f2 || echo "0"
    else
        echo "0"
    fi
}

get_restart_count() {
    if [[ -f "${STATE_FILE}" ]]; then
        grep "restart_count" "${STATE_FILE}" | cut -d'=' -f2 || echo "0"
    else
        echo "0"
    fi
}

update_state() {
    local restart_count=$1
    local last_restart=$2
    cat > "${STATE_FILE}" <<EOF
restart_count=${restart_count}
last_restart=${last_restart}
EOF
}

# Consul Service Check
# Ensures Consul is actually running before checking federation
check_consul_running() {
    if systemctl is-active --quiet "${CONSUL_SERVICE}"; then
        return 0
    else
        log "warning" "Consul service is not running"
        return 1
    fi
}

# WAN Federation Check
# Counts the number of servers visible in the WAN pool
check_wan_federation() {
    local wan_members
    wan_members=$(consul members -wan 2>/dev/null | grep -c "server.*alive" || echo "0")
    
    if [[ "${wan_members}" -eq "${EXPECTED_WAN_MEMBERS}" ]]; then
        log "info" "WAN federation healthy: ${wan_members}/${EXPECTED_WAN_MEMBERS} members"
        return 0
    else
        log "warning" "WAN federation degraded: ${wan_members}/${EXPECTED_WAN_MEMBERS} members"
        return 1
    fi
}

# Consul Service Restart
# Attempts to restart Consul with proper Tailscale dependency
restart_consul() {
    log "info" "Attempting to restart Consul service"
    
    # Ensure Tailscale is ready first
    if ! ip link show tailscale0 &>/dev/null; then
        log "error" "Tailscale interface not ready, cannot restart Consul"
        return 1
    fi
    
    # Restart Consul
    if systemctl restart "${CONSUL_SERVICE}"; then
        log "info" "Consul service restarted successfully"
        return 0
    else
        log "error" "Failed to restart Consul service"
        return 1
    fi
}

# Restart Decision Logic
# Implements cooldown and rate limiting
should_restart() {
    local last_restart=$(get_last_restart)
    local restart_count=$(get_restart_count)
    local current_time=$(date +%s)
    local time_since_last=$((current_time - last_restart))
    
    # Reset counter if enough time has passed (20 minutes)
    if [[ ${time_since_last} -gt 1200 ]]; then
        restart_count=0
        log "info" "Restart counter reset after cooldown period"
    fi
    
    # Check if we're still in cooldown
    if [[ ${time_since_last} -lt ${RESTART_COOLDOWN} ]]; then
        log "info" "Still in cooldown period (${time_since_last}s/${RESTART_COOLDOWN}s)"
        return 1
    fi
    
    # Check if we've hit the restart limit
    if [[ ${restart_count} -ge ${MAX_RESTART_ATTEMPTS} ]]; then
        log "warning" "Maximum restart attempts (${MAX_RESTART_ATTEMPTS}) reached"
        return 1
    fi
    
    return 0
}

# Main Check Function
# Orchestrates the health check and repair process
perform_health_check() {
    log "info" "Starting WAN federation health check"
    
    # First ensure Consul is running
    if ! check_consul_running; then
        log "error" "Consul is not running, skipping WAN check"
        return 1
    fi
    
    # Wait a moment for Consul to be fully ready
    sleep 5
    
    # Check WAN federation status
    if check_wan_federation; then
        # Healthy - reset restart counter if it's been long enough
        local last_restart=$(get_last_restart)
        local current_time=$(date +%s)
        if [[ $((current_time - last_restart)) -gt 1200 ]]; then
            update_state 0 "$last_restart"
        fi
        return 0
    fi
    
    # Federation is broken - attempt repair
    log "warning" "WAN federation is broken, evaluating restart"
    
    if should_restart; then
        local restart_count=$(get_restart_count)
        local current_time=$(date +%s)
        
        if restart_consul; then
            # Update state with new restart
            update_state $((restart_count + 1)) "$current_time"
            
            # Wait and verify
            sleep 30
            if check_wan_federation; then
                log "info" "WAN federation restored after restart"
            else
                log "error" "WAN federation still broken after restart"
            fi
        else
            log "error" "Failed to restart Consul service"
        fi
    else
        log "info" "Skipping restart due to cooldown or limit"
    fi
}

# Script Entry Point
# Can be run in two modes: daemon (continuous) or check (one-time)
main() {
    local mode="${1:-daemon}"
    
    log "info" "Consul WAN health check started in ${mode} mode"
    
    # Ensure we're running on a Consul server
    if ! consul info 2>/dev/null | grep -q "server = true"; then
        log "error" "This script should only run on Consul server nodes"
        exit 1
    fi
    
    case "${mode}" in
        daemon)
            # Continuous monitoring mode
            while true; do
                perform_health_check
                sleep "${CHECK_INTERVAL}"
            done
            ;;
        check)
            # One-time check mode
            perform_health_check
            ;;
        *)
            echo "Usage: $0 [daemon|check]"
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"