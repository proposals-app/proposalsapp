#!/bin/bash
# Register Redis instance in etcd for HAProxy/Confd
# This script is run periodically to keep registration fresh

set -e

# Configuration
ETCD_ENDPOINTS="{{ etcd_endpoints }}"
REDIS_PASSWORD="{{ redis_password }}"
INSTANCE_NAME="{{ inventory_hostname }}"
INSTANCE_HOST="{{ tailscale_ip }}"
INSTANCE_PORT="{{ redis_port }}"
DATACENTER="{{ datacenter }}"

# Function to check Redis role
get_redis_role() {
    redis-cli -h localhost -p {{ redis_port }} -a "$REDIS_PASSWORD" INFO replication 2>/dev/null | grep "role:" | cut -d: -f2 | tr -d '\r' || echo "unknown"
}

# Function to check if Redis is healthy
is_redis_healthy() {
    redis-cli -h localhost -p {{ redis_port }} -a "$REDIS_PASSWORD" ping 2>/dev/null | grep -q "PONG"
}

# Wait for Redis to be ready
for i in {1..30}; do
    if is_redis_healthy; then
        break
    fi
    echo "Waiting for Redis to be ready... ($i/30)"
    sleep 2
done

# Check if Redis is healthy
if ! is_redis_healthy; then
    echo "Redis is not healthy, skipping registration"
    exit 1
fi

# Get current role
ROLE=$(get_redis_role)
echo "Redis role: $ROLE"

# Create JSON data for this instance
JSON_DATA=$(cat <<EOF
{
  "name": "$INSTANCE_NAME",
  "host": "$INSTANCE_HOST",
  "port": $INSTANCE_PORT,
  "datacenter": "$DATACENTER",
  "role": "$ROLE",
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
)

# Register in etcd
for endpoint in $(echo $ETCD_ENDPOINTS | tr ',' ' '); do
    echo "Registering with etcd at $endpoint"
    
    # Register instance data
    if etcdctl --endpoints="$endpoint" put "/service/redis/instances/$INSTANCE_NAME" "$JSON_DATA"; then
        echo "Successfully registered instance in etcd"
        
        # If this is the master, also update the master key
        if [ "$ROLE" = "master" ]; then
            if etcdctl --endpoints="$endpoint" put "/service/redis/master" "$INSTANCE_HOST:$INSTANCE_PORT"; then
                echo "Updated master location in etcd"
            fi
        fi
        
        # Also register with Sentinel information
        SENTINEL_DATA=$(cat <<EOF
{
  "name": "sentinel-$INSTANCE_NAME",
  "host": "$INSTANCE_HOST",
  "port": {{ sentinel_port }},
  "datacenter": "$DATACENTER",
  "monitoring": "proposalsapp-redis"
}
EOF
)
        etcdctl --endpoints="$endpoint" put "/service/redis-sentinel/instances/sentinel-$INSTANCE_NAME" "$SENTINEL_DATA"
        echo "Registered Sentinel in etcd"
        
        break
    else
        echo "Failed to register with etcd at $endpoint, trying next..."
    fi
done

echo "Redis etcd registration complete"