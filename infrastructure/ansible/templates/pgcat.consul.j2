template {
  destination = "/etc/pgcat/pgcat.toml"
  perms = 0644
  user = "root"
  group = "root"
  
  # Reload pgcat when configuration changes
  command = "systemctl reload pgcat || systemctl restart pgcat"
  command_timeout = "60s"
  
  # Backup before update
  backup = true
  
  # Template contents
  contents = <<EOT
{% raw %}
# PgCat configuration - managed by Consul Template
# Auto-generated from Consul service discovery

[general]
host = "0.0.0.0"
port = 5432
admin_username = "pgcat"
admin_password = "{{ key "pgcat/admin_password" }}"
admin_api_enabled = true
prometheus_exporter_enabled = true
prometheus_exporter_port = 9930

pool_mode = "transaction"
default_pool_size = {{ keyOrDefault "pgcat/pool_size" "25" }}
min_pool_size = {{ keyOrDefault "pgcat/min_pool_size" "10" }}
reserve_pool_size = {{ keyOrDefault "pgcat/reserve_pool_size" "5" }}

# Enable intelligent query routing for local-first reads
query_parser_enabled = true
query_parser_read_write_splitting = true
primary_reads_enabled = true

# Configuration auto-reload interval (check every 5 seconds)
config_check_interval = 5000

connect_timeout = 5000
idle_timeout = 1800000
healthcheck_timeout = 1000
healthcheck_delay = 30000
ban_time = 60000

log_level = "{{ keyOrDefault "pgcat/log_level" "info" }}"
worker_threads = {{ keyOrDefault "pgcat/worker_threads" "4" }}

[pools.{{ keyOrDefault "database/name" "proposalsapp" }}]
pool_mode = "transaction"

[pools.{{ keyOrDefault "database/name" "proposalsapp" }}.users.0]
username = "{{ keyOrDefault "database/user" "proposalsapp" }}"
password = "{{ key "database/password" }}"
pool_size = {{ keyOrDefault "pgcat/user_pool_size" "10" }}

# Local-first server ordering for optimal read performance
[pools.{{ keyOrDefault "database/name" "proposalsapp" }}.shards.0]
servers = [
{{- $dc := env "DATACENTER" -}}
{{- $localServerFound := false -}}
{{- /* First, add the local datacenter database (whether primary or replica) */ -}}
{{- range service "proposalsapp" }}
  {{- if eq .Datacenter $dc }}
    {{- $localServerFound = true }}
    {{- if or (in .Tags "master") (in .Tags "primary") }}
      ["{{ .Address }}", {{ .Port }}, "primary"],
    {{- else }}
      ["{{ .Address }}", {{ .Port }}, "replica"],
    {{- end }}
  {{- end }}
{{- end }}
{{- /* If no local server found, log warning */ -}}
{{- if not $localServerFound }}
  # WARNING: No local database server found in datacenter {{ $dc }}
{{- end }}
{{- /* Then add remote databases as fallbacks */ -}}
{{- range service "proposalsapp" }}
  {{- if ne .Datacenter $dc }}
    {{- if or (in .Tags "master") (in .Tags "primary") }}
      ["{{ .Address }}", {{ .Port }}, "primary"],
    {{- else }}
      ["{{ .Address }}", {{ .Port }}, "replica"],
    {{- end }}
  {{- end }}
{{- end }}
]
database = "{{ keyOrDefault "database/name" "proposalsapp" }}"
{% endraw %}
EOT
}