template {
  source = "/etc/consul-template.d/pgcat.toml.ctmpl"
  destination = "/etc/pgcat/pgcat.toml"
  perms = 0640
  user = "pgcat"
  group = "pgcat"
  
  # Reload pgcat when configuration changes
  command = "systemctl reload pgcat || true"
  command_timeout = "60s"
  
  # Backup before update
  backup = true
  
  # Template contents
  contents = <<EOT
# PgCat configuration - managed by Consul Template
# Auto-generated from Consul service discovery

[general]
host = "0.0.0.0"
port = 5432
admin_username = "pgcat"
admin_password = "{{ key "pgcat/admin_password" }}"
admin_api_enabled = true
prometheus_exporter_enabled = true
prometheus_exporter_port = 9930

pool_mode = "transaction"
default_pool_size = {{ key_or_default "pgcat/pool_size" "25" }}
min_pool_size = {{ key_or_default "pgcat/min_pool_size" "10" }}
reserve_pool_size = {{ key_or_default "pgcat/reserve_pool_size" "5" }}

query_parser_enabled = true
query_parser_read_write_splitting = true
primary_reads_enabled = false

connect_timeout = "5s"
idle_timeout = "30m"
healthcheck_timeout = "1s"
healthcheck_delay = "30s"
ban_time = "60s"

log_level = "{{ key_or_default "pgcat/log_level" "info" }}"
worker_threads = {{ key_or_default "pgcat/worker_threads" "4" }}

[pools.{{ key_or_default "database/name" "proposalsapp" }}]
pool_mode = "transaction"
primary_reads_enabled = false
query_parser_enabled = true
query_parser_read_write_splitting = true

[pools.{{ key_or_default "database/name" "proposalsapp" }}.users.{{ key_or_default "database/user" "proposalsapp" }}]
password = "{{ key "database/password" }}"
pool_size = {{ key_or_default "pgcat/user_pool_size" "10" }}

# Primary shard - dynamically discovered
[[pools.{{ key_or_default "database/name" "proposalsapp" }}.shards]]
servers = [
{{- range service "proposalsapp" }}
  {{- if or (in .Tags "master") (in .Tags "primary") }}
    ["{{ .Address }}", {{ .Port }}, "primary"],
  {{- end }}
{{- end }}
]
role = "primary"

# Local datacenter replicas - preferred for reads
[[pools.{{ key_or_default "database/name" "proposalsapp" }}.shards]]
servers = [
{{- $dc := env "DATACENTER" -}}
{{- range service "proposalsapp" }}
  {{- if and (in .Tags "replica") (eq .Datacenter $dc) }}
    ["{{ .Address }}", {{ .Port }}, "replica"],
  {{- end }}
{{- end }}
]
role = "replica"

# Remote datacenter replicas - fallback
{{- if key_or_default "pgcat/enable_cross_dc_reads" "false" | parseBool }}
[[pools.{{ key_or_default "database/name" "proposalsapp" }}.shards]]
servers = [
{{- range service "proposalsapp" }}
  {{- if and (in .Tags "replica") (ne .Datacenter $dc) }}
    ["{{ .Address }}", {{ .Port }}, "replica"],
  {{- end }}
{{- end }}
]
role = "replica"
{{- end }}
EOT
}