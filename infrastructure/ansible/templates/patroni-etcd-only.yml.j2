scope: proposalsapp
namespace: /service/
name: {{ inventory_hostname }}

restapi:
  listen: 0.0.0.0:{{ patroni_rest_api_port }}
  connect_address: {{ tailscale_ip | default(ansible_default_ipv4.address) }}:{{ patroni_rest_api_port }}
  authentication:
    username: patroni
    password: {{ postgres_password }}

# Use etcd3 as the Distributed Configuration Store (DCS)
etcd3:
  hosts: {% for host in groups['postgres_nodes'] %}{{ hostvars[host]['tailscale_ip'] }}:{{ etcd_client_port }}{% if not loop.last %},{% endif %}{% endfor %}
  
  protocol: http
  
  # Retry configuration for better resilience
  retry_timeout: 60
  ttl: 30

bootstrap:
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 30
    maximum_lag_on_failover: 1048576
    master_start_timeout: 300
    synchronous_mode: false
    synchronous_mode_strict: false
    synchronous_node_count: 1
    postgresql:
      use_pg_rewind: true
      use_slots: true
      parameters:
        max_connections: 200
        # Adjust these based on your server's RAM
        # For 8GB RAM server: shared_buffers=2GB, effective_cache_size=6GB
        # For 16GB RAM server: shared_buffers=4GB, effective_cache_size=12GB
        # For 32GB RAM server: shared_buffers=8GB, effective_cache_size=24GB
        shared_buffers: {{ postgres_shared_buffers | default('2GB') }}
        effective_cache_size: {{ postgres_effective_cache_size | default('6GB') }}
        maintenance_work_mem: 64MB
        checkpoint_completion_target: 0.9
        wal_buffers: 16MB
        default_statistics_target: 100
        random_page_cost: 1.1
        effective_io_concurrency: 200
        work_mem: {{ postgres_work_mem | default('16MB') }}
        min_wal_size: 1GB
        max_wal_size: 4GB
        max_worker_processes: 8
        max_parallel_workers_per_gather: 4
        max_parallel_workers: 8
        max_parallel_maintenance_workers: 4
        wal_level: replica
        hot_standby: "on"
        max_wal_senders: 10
        max_replication_slots: 10
        hot_standby_feedback: "on"
        wal_log_hints: "on"
        shared_preload_libraries: 'pg_stat_statements'
        synchronous_commit: "on"
        synchronous_standby_names: ""
        # Enable password encryption with SCRAM
        password_encryption: scram-sha-256

  initdb:
  - encoding: UTF8
  - data-checksums

  pg_hba:
  # Tailscale network only - using scram-sha-256 for better security
  - host replication replicator 100.64.0.0/10 scram-sha-256
  - host all all 100.64.0.0/10 scram-sha-256
  # Local connections
  - local all all peer
  # Deny all other connections
  - host all all 0.0.0.0/0 reject

  # Users to create during cluster initialization
  # Note: These are only created during initial bootstrap
  users:
    proposalsapp:
      password: "{{ postgres_password }}"
      options:
        - createrole
        - createdb
        - login
    replicator:
      password: "{{ postgres_replication_password }}"
      options:
        - replication
        - login

  # Method to use for initial cluster creation
  method: initdb
  
  # Post-init script to run after cluster initialization
  post_init: /tmp/patroni-post-init.sh

postgresql:
  listen: 0.0.0.0:{{ postgres_port }}
  connect_address: {{ tailscale_ip | default(ansible_default_ipv4.address) }}:{{ postgres_port }}
  data_dir: /var/lib/postgresql/{{ postgres_version }}/data
  bin_dir: /usr/lib/postgresql/{{ postgres_version }}/bin
  pgpass: /tmp/pgpass0
  authentication:
    replication:
      username: replicator
      password: {{ postgres_replication_password }}
    superuser:
      username: postgres
      password: {{ postgres_password }}
  
  create_replica_methods:
    - basebackup
  
  basebackup:
    checkpoint: 'fast'

tags:
  nofailover: false
  noloadbalance: false
  clonefrom: false
  nosync: false