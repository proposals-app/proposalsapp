# pgpool-II configuration file
# This file provides PostgreSQL connection pooling with automatic read/write splitting
# and dynamic backend configuration via Confd watching etcd
#
# Architecture Context:
# - pgpool-II runs on each application node (apps-xxx)
# - Acts as a smart connection pooler with query-based load balancing
# - Routes writes to primary, reads to local replica when available
# - Configuration is dynamically updated by Confd watching etcd

#------------------------------------------------------------------------------
# NETWORK CONFIGURATION
#------------------------------------------------------------------------------
listen_addresses = '*'
port = 5432
socket_dir = '/var/run/postgresql'
pcp_listen_addresses = '*'
pcp_port = 9898
pcp_socket_dir = '/var/run/postgresql'
pid_file_name = '/var/run/pgpool/pgpool.pid'

#------------------------------------------------------------------------------
# CONNECTION POOLING
#------------------------------------------------------------------------------
# Connection pool mode - using session mode for compatibility
# Note: transaction mode can cause issues with SCRAM authentication

# Number of preforked pgpool-II server processes
num_init_children = {{ pgpool_num_init_children | default(32) }}

# Maximum number of connection pools per child process
max_pool = {{ pgpool_max_pool | default(4) }}

# Keep connections to backends alive
connection_life_time = 0
client_idle_limit = 0

# Child process management
child_life_time = {{ pgpool_child_life_time | default(300) }}
child_max_connections = {{ pgpool_child_max_connections | default(0) }}

#------------------------------------------------------------------------------
# AUTHENTICATION
#------------------------------------------------------------------------------
enable_pool_hba = on
pool_passwd = 'pool_passwd'
authentication_timeout = 60

# Allow SCRAM-SHA-256 authentication
allow_clear_text_frontend_auth = off

#------------------------------------------------------------------------------
# LOAD BALANCING AND QUERY ROUTING
#------------------------------------------------------------------------------
# Enable load balancing mode for read query distribution
load_balance_mode = on

# Ignore leading white spaces in queries for load balancing
ignore_leading_white_space = on

# Enable query-based load balancing
# This is equivalent to PgCat's query parser
white_function_list = ''
black_function_list = 'currval,lastval,nextval,setval'

# Write queries patterns - always go to primary
black_query_pattern_list = 'INSERT;UPDATE;DELETE;TRUNCATE;ALTER;CREATE;DROP;GRANT;REVOKE'

# Disable load balancing for queries in explicit transactions with writes
disable_load_balance_on_write = 'transaction'

# Statement level load balancing for better distribution
statement_level_load_balance = on

#------------------------------------------------------------------------------
# STREAMING REPLICATION MODE
#------------------------------------------------------------------------------
# Enable streaming replication mode for automatic failover support
master_slave_mode = on
master_slave_sub_mode = 'stream'

# Check replication delay for load balancing decisions
sr_check_period = 10
sr_check_user = '{{ database_user | default("proposalsapp") }}'
sr_check_password = '{{ database_password }}'
sr_check_database = '{{ database_name | default("proposalsapp") }}'

# Prefer local standby for read queries (similar to PgCat's LOC algorithm)
# Weight-based load balancing will be configured per backend
delay_threshold = {{ pgpool_delay_threshold | default(10000000) }}

#------------------------------------------------------------------------------
# HEALTH CHECK
#------------------------------------------------------------------------------
# Health check configuration similar to PgCat
health_check_period = {{ pgpool_health_check_period | default(30) }}
health_check_timeout = {{ pgpool_health_check_timeout | default(10) }}
health_check_user = '{{ database_user | default("proposalsapp") }}'
health_check_password = '{{ database_password }}'
health_check_database = '{{ database_name | default("proposalsapp") }}'
health_check_max_retries = {{ pgpool_health_check_max_retries | default(3) }}
health_check_retry_delay = {{ pgpool_health_check_retry_delay | default(1) }}
connect_timeout = {{ pgpool_connect_timeout | default(10000) }}

#------------------------------------------------------------------------------
# BACKEND CONNECTION SETTINGS
#------------------------------------------------------------------------------
# NOTE: This section is managed by Confd based on Patroni state in etcd
# The static configuration below provides initial values for first startup

# Backend 0 - Local datacenter server (will be updated by Confd)
{% for host in groups['postgres_nodes'] %}
{% if hostvars[host]['datacenter'] | default('dc1') == datacenter | default('dc1') %}
backend_hostname0 = '{{ hostvars[host]['tailscale_ip'] | default(hostvars[host]['ansible_default_ipv4']['address']) }}'
backend_port0 = 5432
backend_weight0 = 2  # Higher weight for local server
backend_data_directory0 = '/var/lib/postgresql/17/main'
backend_flag0 = 'ALLOW_TO_FAILOVER'
backend_application_name0 = 'pgpool_{{ datacenter }}'
{% endif %}
{% endfor %}

# Remote datacenter servers as fallbacks (will be updated by Confd)
{% set backend_index = namespace(value=1) %}
{% for host in groups['postgres_nodes'] %}
{% if hostvars[host]['datacenter'] | default('dc1') != datacenter | default('dc1') %}
backend_hostname{{ backend_index.value }} = '{{ hostvars[host]['tailscale_ip'] | default(hostvars[host]['ansible_default_ipv4']['address']) }}'
backend_port{{ backend_index.value }} = 5432
backend_weight{{ backend_index.value }} = 1  # Lower weight for remote servers
backend_data_directory{{ backend_index.value }} = '/var/lib/postgresql/17/main'
backend_flag{{ backend_index.value }} = 'ALLOW_TO_FAILOVER'
backend_application_name{{ backend_index.value }} = 'pgpool_{{ hostvars[host]['datacenter'] }}'
{% set backend_index.value = backend_index.value + 1 %}
{% endif %}
{% endfor %}

#------------------------------------------------------------------------------
# LOGGING
#------------------------------------------------------------------------------
log_destination = 'stderr'
log_line_prefix = '%t [%p] %q%u@%d '
log_connections = {{ pgpool_log_connections | default('off') }}
log_disconnections = {{ pgpool_log_disconnections | default('off') }}
log_hostname = off
log_statement = {{ pgpool_log_statement | default('none') }}
log_per_node_statement = off
log_client_messages = {{ pgpool_log_client_messages | default('off') }}
log_standby_delay = 'if_over_threshold'

# Debug levels
debug_level = {{ pgpool_debug_level | default(0) }}

#------------------------------------------------------------------------------
# PCP (PGPOOL CONTROL PORT) SETTINGS
#------------------------------------------------------------------------------
# Used for administrative commands and monitoring
# PCP configuration handled by pcp.conf file

#------------------------------------------------------------------------------
# WATCHDOG (Disabled - single instance per node)
#------------------------------------------------------------------------------
use_watchdog = off

#------------------------------------------------------------------------------
# MEMORY CACHE - Disabled to avoid lock file issues
#------------------------------------------------------------------------------
memory_cache_enabled = off
enable_query_cache = off
memqcache_method = 'shmem'
memqcache_memcached_host = ''
memqcache_memcached_port = 11211
memqcache_total_size = 64MB
memqcache_max_num_cache = 1000000
memqcache_expire = 0
memqcache_cache_block_size = 1MB
memqcache_oiddir = '/tmp'
memqcache_auto_cache_invalidation = off
# Set logdir to a writable location
logdir = '{{ pgpool_log_dir }}'

#------------------------------------------------------------------------------
# MISC CONFIGURATION
#------------------------------------------------------------------------------
relcache_expire = 0
relcache_size = 256

# Process management
process_management_mode = static
process_management_strategy = gentle

# Enable various query rewriting/optimization features
insert_lock = off
lobj_lock_table = ''

# Connection cache
connection_cache = on
reset_query_list = 'ABORT; DISCARD ALL'

# Failover configuration
failover_on_backend_error = off
failover_on_backend_shutdown = off