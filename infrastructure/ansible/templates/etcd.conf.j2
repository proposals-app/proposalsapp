# etcd Configuration Template for Multi-Datacenter Deployment
# Purpose: Configures etcd nodes to form a distributed consensus cluster
#          that Patroni uses for PostgreSQL leader election and configuration.
#
# Architecture Context:
# - 3-node etcd cluster across three datacenters
# - Used exclusively by Patroni for PostgreSQL HA coordination
# - Each etcd node runs on the same container as PostgreSQL
# - Must handle WAN latencies: Romania↔Romania ~10-20ms, Romania↔Germany ~30-50ms
#
# Where this runs:
# - db-xxx nodes (database containers)
# - Co-located with PostgreSQL and Patroni

# Member Configuration
# Unique identification for this etcd node
name: '{{ inventory_hostname }}'

# Data Storage Paths
# data-dir: Stores the etcd database (cluster state, key-value pairs)
# wal-dir: Write-Ahead Log for durability (separate for performance)
data-dir: '{{ etcd_data_dir }}'
wal-dir: '{{ etcd_wal_dir }}'

# Cluster Communication Settings
# etcd uses two types of communication:
# 1. Peer communication (between etcd nodes) - uses peer port (2380)
# 2. Client communication (from Patroni to etcd) - uses client port (2379)

# Peer URLs - How other etcd nodes connect to this node
initial-advertise-peer-urls: 'http://{{ tailscale_ip }}:{{ etcd_peer_port }}'  # What we advertise to peers
listen-peer-urls: 'http://0.0.0.0:{{ etcd_peer_port }}'                       # Listen on all interfaces

# Client URLs - How Patroni connects to this etcd node
advertise-client-urls: 'http://{{ tailscale_ip }}:{{ etcd_client_port }}'      # What we advertise to clients
listen-client-urls: 'http://0.0.0.0:{{ etcd_client_port }}'                    # Listen on all interfaces

# Initial Cluster Bootstrap
# Lists all etcd nodes for initial cluster formation
# After bootstrap, membership changes use etcd's reconfiguration API
initial-cluster: '{% for host in groups["postgres_nodes"] %}{{ host }}=http://{{ hostvars[host]["tailscale_ip"] }}:{{ etcd_peer_port }}{% if not loop.last %},{% endif %}{% endfor %}'

# Cluster State
# 'new': First time starting this cluster (will bootstrap)
# 'existing': Joining an already bootstrapped cluster
initial-cluster-state: 'new'

# Cluster Token
# Prevents different etcd clusters from accidentally merging
# Must be unique per cluster but identical across all nodes
initial-cluster-token: 'proposalsapp-etcd-cluster'

# API Version
# Disable deprecated v2 API, use only v3 (required for Patroni)
enable-v2: false

# WAN Performance Tuning
# Critical settings for multi-datacenter operation with varying latencies
# Based on etcd best practices for cross-DC deployments
#
# Network characteristics:
# - Romania to Germany: ~30-50ms RTT
# - Within Romania DCs: ~10-20ms RTT
# - Must account for jitter and occasional packet loss
#
# Tuning rationale:
# - heartbeat-interval: Set to 2x expected max RTT to handle jitter
# - election-timeout: Set to 5x heartbeat (etcd recommendation)
heartbeat-interval: 100  # 100ms accommodates 50ms RTT + jitter
election-timeout: 500    # 500ms = 5x heartbeat interval

# Snapshot Configuration
# Controls how often etcd persists its state to disk
# More frequent snapshots = faster recovery but higher I/O
snapshot-count: 5000      # Take snapshot every 5000 transactions
max-snapshots: 5          # Keep last 5 snapshots
max-wals: 5               # Keep last 5 Write-Ahead Logs

# Compaction Settings
# Prevents unbounded growth of etcd history
# Important for long-running clusters
auto-compaction-retention: '72h'   # Keep 72 hours of history
auto-compaction-mode: 'periodic'   # Compact based on time, not revisions

# Request Size Limit
# Maximum size for client requests (10MB)
# Sufficient for Patroni's configuration needs
max-request-bytes: 10485760

# Pre-vote Feature
# Prevents unnecessary leader elections during network partitions
# Node checks if it can win election before triggering one
pre-vote: true

# Cluster Reconfiguration Safety
# Prevents accidental cluster membership changes
# Requires explicit acknowledgment for member additions/removals
strict-reconfig-check: true

# Logging Configuration
# info level provides operational visibility without spam
log-level: 'info'
log-outputs: ['default']    # Log to systemd journal

# Metrics Collection
# Basic metrics for monitoring (CPU, disk, network)
# Exposed on client port at /metrics endpoint
metrics: 'basic'

# Backend Performance Tuning
# BoltDB (bbolt) backend optimizations
backend-batch-limit: 1000               # Batch size for backend commits
backend-bbolt-freelist-type: 'map'      # More efficient freelist management

# Storage Quota
# Prevents etcd from consuming unlimited disk space
# 2GB is sufficient for Patroni's needs
quota-backend-bytes: 2147483648  # 2GB limit

# gRPC Gateway
# Enables HTTP/2 for better performance over WAN
# Required for some etcd v3 client features
enable-grpc-gateway: true