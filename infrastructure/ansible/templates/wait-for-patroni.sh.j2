#!/bin/bash
# Wait for Patroni Script
# Purpose: Waits for Patroni to fully initialize the PostgreSQL cluster
#          and ensures the database is ready to accept connections.
#
# Used during:
# - Initial cluster deployment
# - After configuration changes
# - During maintenance operations
#
# Exit codes:
# - 0: Success - PostgreSQL is ready
# - 1: Timeout - PostgreSQL not ready after maximum wait time

set -e  # Exit on error

# Set PostgreSQL password for connection tests
export PGPASSWORD="{{ postgres_password }}"

# Configuration
MAX_ATTEMPTS=45      # Maximum number of attempts
SLEEP_INTERVAL=3     # Seconds between attempts
# Total wait time: 45 * 3 = 135 seconds

# Wait loop
i=1
while [ $i -le $MAX_ATTEMPTS ]; do
    # Query current cluster state using patronictl
    echo "Checking cluster state (attempt $i/$MAX_ATTEMPTS)..."
    cluster_state=$(/var/lib/postgresql/.local/bin/patronictl -c /etc/patroni/patroni.yml list 2>&1)
    echo "$cluster_state"
    
    # Parse cluster state and check readiness
    if echo "$cluster_state" | grep -q "Leader.*running"; then
        # Leader exists and is running - try to connect
        if psql -h localhost -U postgres -d postgres -c "SELECT 1;" >/dev/null 2>&1; then
            echo "SUCCESS: PostgreSQL is ready and accepting connections"
            exit 0
        else
            echo "Leader exists but cannot connect yet..."
        fi
    elif echo "$cluster_state" | grep -q "initializing"; then
        # Cluster is being initialized
        echo "Cluster is still initializing..."
    elif echo "$cluster_state" | grep -q "uninitialized"; then
        # Waiting for first node to bootstrap
        echo "Cluster is uninitialized, waiting for bootstrap..."
    fi
    
    # Wait before next attempt
    sleep $SLEEP_INTERVAL
    i=$((i + 1))
done

# Timeout reached - collect debugging information
echo "ERROR: PostgreSQL not ready after $((MAX_ATTEMPTS * SLEEP_INTERVAL)) seconds"
echo ""
echo "Final cluster state:"
/var/lib/postgresql/.local/bin/patronictl -c /etc/patroni/patroni.yml list
echo ""
echo "Recent Patroni logs:"
journalctl -u patroni -n 50 --no-pager

# Exit with error
exit 1