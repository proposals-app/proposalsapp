---
- name: Setup GitHub Actions Self-Hosted Runners
  hosts: github_runners
  become: true
  vars:
    runner_version: "2.321.0"
    runner_user: "runner"
    runner_group: "runner"
    runner_home: "/home/runner"
    runner_workdir: "{{ runner_home }}/actions-runner"
    github_url: "https://github.com/{{ vault_github_org }}/{{ vault_github_repo }}"
    
  tasks:
    - name: Add Microsoft package signing key
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add Microsoft package repository
      apt_repository:
        repo: "deb [arch=amd64] https://packages.microsoft.com/debian/12/prod bookworm main"
        state: present
        filename: microsoft-prod

    - name: Install basic required packages
      apt:
        name:
          - sudo
          - curl
          - jq
          - git
          - build-essential
          - libssl-dev
          - libffi-dev
          - python3
          - python3-venv
          - python3-dev
          - python3-pip
          - nodejs
          - npm
          - unzip
          - dotnet-sdk-8.0
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - pkg-config
          - clang
          - lld
          - libunwind-dev
          - libdw-dev
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Install Docker Engine and Docker Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Create runner group
      group:
        name: "{{ runner_group }}"
        system: yes

    - name: Create runner user
      user:
        name: "{{ runner_user }}"
        group: "{{ runner_group }}"
        home: "{{ runner_home }}"
        shell: /bin/bash
        create_home: yes
        system: yes

    - name: Add runner user to docker group
      user:
        name: "{{ runner_user }}"
        groups: docker
        append: yes

    - name: Configure sudoers for runner user
      copy:
        content: "{{ runner_user }} ALL=(ALL) NOPASSWD: ALL"
        dest: "/etc/sudoers.d/{{ runner_user }}"
        mode: '0440'
        validate: 'visudo -cf %s'

    - name: Create runner directory
      file:
        path: "{{ runner_workdir }}"
        state: directory
        owner: "{{ runner_user }}"
        group: "{{ runner_group }}"
        mode: '0755'

    - name: Download GitHub Actions runner
      unarchive:
        src: "https://github.com/actions/runner/releases/download/v{{ runner_version }}/actions-runner-linux-x64-{{ runner_version }}.tar.gz"
        dest: "{{ runner_workdir }}"
        remote_src: yes
        owner: "{{ runner_user }}"
        group: "{{ runner_group }}"
        creates: "{{ runner_workdir }}/config.sh"

    - name: Install Rust toolchain
      become: true
      become_user: "{{ runner_user }}"
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: "{{ runner_home }}/.cargo/bin/rustc"
        executable: /bin/bash

    - name: Configure Rust toolchain
      become: true
      become_user: "{{ runner_user }}"
      shell: |
        . $HOME/.cargo/env
        rustup default stable
        rustup component add clippy rustfmt
      args:
        executable: /bin/bash

    - name: Get runner registration token
      uri:
        url: "https://api.github.com/repos/{{ vault_github_org }}/{{ vault_github_repo }}/actions/runners/registration-token"
        method: POST
        headers:
          Authorization: "token {{ vault_github_pat }}"
          Accept: "application/vnd.github.v3+json"
        status_code: 201
      register: runner_token
      when: vault_github_pat is defined and vault_github_pat != ""

    - name: Check if runner is already configured
      stat:
        path: "{{ runner_workdir }}/.runner"
      register: runner_configured

    - name: Configure GitHub Actions runner
      become: true
      become_user: "{{ runner_user }}"
      shell: |
        cd {{ runner_workdir }}
        ./config.sh \
          --url {{ github_url }} \
          --token {{ runner_token.json.token }} \
          --name {{ inventory_hostname }} \
          --work _work \
          --labels linux,self-hosted,{{ datacenter }},tailscale{{ ',sibiu' if inventory_hostname in ['github-runner-sib-01', 'github-runner-sib-03'] else '' }} \
          --unattended \
          --replace
      when: 
        - runner_token is defined
        - not runner_configured.stat.exists
        - vault_github_pat is defined 
        - vault_github_pat != ""

    - name: Install runner service
      become: true
      become_user: "{{ runner_user }}"
      shell: |
        cd {{ runner_workdir }}
        sudo ./svc.sh install {{ runner_user }}
      args:
        creates: /etc/systemd/system/actions.runner.{{ vault_github_org }}-{{ vault_github_repo }}.{{ inventory_hostname }}.service
      when:
        - vault_github_pat is defined 
        - vault_github_pat != ""

    - name: Start and enable runner service
      systemd:
        name: "actions.runner.{{ vault_github_org }}-{{ vault_github_repo }}.{{ inventory_hostname }}"
        state: started
        enabled: yes
        daemon_reload: yes
      when:
        - vault_github_pat is defined 
        - vault_github_pat != ""

    - name: Setup Docker buildx
      shell: |
        docker buildx create --name multiarch --driver docker-container --use || true
        docker buildx inspect --bootstrap
      become: true
      become_user: "{{ runner_user }}"
      ignore_errors: true

    - name: Configure Docker for insecure registries
      copy:
        content: |
          {
            "insecure-registries": [
              "ghcr.io"
            ],
            "features": {
              "buildkit": true
            },
            "experimental": true,
            "builder": {
              "gc": {
                "enabled": true,
                "defaultKeepStorage": "10GB"
              }
            }
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      notify: restart docker

    - name: Create buildx config directory
      file:
        path: "{{ runner_home }}/.docker/buildx"
        state: directory
        owner: "{{ runner_user }}"
        group: "{{ runner_group }}"
        mode: '0755'

    - name: Configure buildx with cache limits
      become: true
      become_user: "{{ runner_user }}"
      copy:
        content: |
          [worker.oci]
            max-parallelism = 4
            gc = true
            gckeepstorage = 5000
            
          [[worker.oci.gcpolicy]]
            keepBytes = 5368709120
            keepDuration = 604800
            
          [[worker.oci.gcpolicy]]
            all = true
            keepBytes = 10737418240
        dest: "{{ runner_home }}/.docker/buildx/buildkitd.toml"
        owner: "{{ runner_user }}"
        group: "{{ runner_group }}"
        mode: '0644'

    - name: Create runner healthcheck script
      copy:
        content: |
          #!/bin/bash
          # Check if runner service is active
          systemctl is-active --quiet actions.runner.{{ vault_github_org }}-{{ vault_github_repo }}.{{ inventory_hostname }}
          exit $?
        dest: /usr/local/bin/runner-healthcheck
        mode: '0755'

    - name: Copy GitHub runner cleanup script
      copy:
        src: files/github-runner-cleanup.sh
        dest: /usr/local/bin/github-runner-cleanup.sh
        mode: '0755'
        owner: root
        group: root

    - name: Copy GitHub runner cleanup service
      copy:
        src: files/github-runner-cleanup.service
        dest: /etc/systemd/system/github-runner-cleanup.service
        mode: '0644'
        owner: root
        group: root

    - name: Copy GitHub runner disk monitor script
      copy:
        src: files/github-runner-disk-monitor.sh
        dest: /usr/local/bin/github-runner-disk-monitor.sh
        mode: '0755'
        owner: root
        group: root

    - name: Copy GitHub runner disk monitor service
      copy:
        src: files/github-runner-disk-monitor.service
        dest: /etc/systemd/system/github-runner-disk-monitor.service
        mode: '0644'
        owner: root
        group: root

    - name: Copy GitHub runner disk monitor timer
      copy:
        src: files/github-runner-disk-monitor.timer
        dest: /etc/systemd/system/github-runner-disk-monitor.timer
        mode: '0644'
        owner: root
        group: root

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start GitHub runner disk monitor timer
      systemd:
        name: github-runner-disk-monitor.timer
        enabled: yes
        state: started

    - name: Run initial cleanup
      command: /usr/local/bin/github-runner-cleanup.sh
      register: initial_cleanup
      ignore_errors: yes

    - name: Display initial cleanup results
      debug:
        msg: "Initial cleanup completed. Check logs at /var/log/github-runner-cleanup.log"
      when: initial_cleanup is defined

    - name: Display setup summary
      debug:
        msg: |
          ========================================
          GitHub Runner Setup Complete: {{ inventory_hostname }}
          ========================================
          {% if vault_github_pat is defined and vault_github_pat != "" %}
          - Runner configured and running
          - Service: actions.runner.{{ vault_github_org }}-{{ vault_github_repo }}.{{ inventory_hostname }}
          - Labels: linux,self-hosted,{{ datacenter }},tailscale
          - Docker and buildx configured
          - Rust toolchain installed
          - Automatic disk space monitoring (checks every 15 minutes)
          - Cleanup runs automatically when disk usage exceeds 80%
          {% else %}
          WARNING: GitHub PAT not configured!
          
          To complete setup:
          1. Create a GitHub Personal Access Token with:
             - repo scope
             - workflow scope
          2. Edit vault: ansible-vault edit group_vars/all/vault.yml --vault-password-file .vault_pass
          3. Set vault_github_pat: "YOUR_TOKEN_HERE"
          4. Re-run this playbook
          {% endif %}
          ========================================

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted