---
- name: Setup local Docker registry for GitHub runners
  hosts: github_runners
  become: true
  vars:
    registry_port: 5000
    registry_data_dir: /var/lib/docker-registry
    
  tasks:
    - name: Configure Docker daemon to use insecure registry
      copy:
        content: |
          {
            "insecure-registries": ["localhost:{{ registry_port }}"]
          }
        dest: /etc/docker/daemon.json
        backup: yes
      register: docker_config_changed

    - name: Restart Docker if configuration changed
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes
      when: docker_config_changed.changed

    - name: Wait for Docker to be ready
      command: docker info
      register: docker_info
      until: docker_info.rc == 0
      retries: 5
      delay: 5
      when: docker_config_changed.changed
    
    - name: Create registry data directory
      file:
        path: "{{ registry_data_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Check if registry container exists
      command: docker ps -a --filter name=registry --format '{{ '{{' }}.Names{{ '}}' }}'
      register: existing_registry
      changed_when: false

    - name: Remove existing registry container if present
      command: docker rm -f registry
      when: existing_registry.stdout == 'registry'
      
    - name: Run local Docker registry
      command: |
        docker run -d \
          --name registry \
          --restart always \
          -p {{ registry_port }}:5000 \
          -v {{ registry_data_dir }}:/var/lib/registry \
          -e REGISTRY_STORAGE_DELETE_ENABLED=true \
          -e REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry \
          -e REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR=inmemory \
          -e REGISTRY_STORAGE_MAINTENANCE_UPLOADPURGING_ENABLED=true \
          -e REGISTRY_STORAGE_MAINTENANCE_UPLOADPURGING_AGE=168h \
          -e REGISTRY_STORAGE_MAINTENANCE_UPLOADPURGING_INTERVAL=24h \
          -e REGISTRY_HTTP_TIMEOUT_READ=900s \
          -e REGISTRY_HTTP_TIMEOUT_WRITE=900s \
          -e REGISTRY_HTTP_TIMEOUT_IDLE=900s \
          -e REGISTRY_HTTP_SECRET={{ vault_docker_registry_secret | default('myregistrysecret') }} \
          -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 \
          registry:2
      
    - name: Wait for registry container to be running
      command: docker ps --filter name=registry --filter status=running --format '{{ '{{' }}.Names{{ '}}' }}'
      register: registry_running
      until: registry_running.stdout == 'registry'
      retries: 10
      delay: 3

    - name: Create registry garbage collection script
      copy:
        content: |
          #!/bin/bash
          # Garbage collect the registry to free up space
          docker exec registry bin/registry garbage-collect /etc/docker/registry/config.yml
        dest: /usr/local/bin/registry-gc
        mode: '0755'

    - name: Setup cron job for registry garbage collection
      cron:
        name: "Docker registry garbage collection"
        minute: "0"
        hour: "3"
        job: "/usr/local/bin/registry-gc > /var/log/registry-gc.log 2>&1"

    - name: Test registry
      uri:
        url: "http://localhost:{{ registry_port }}/v2/"
        method: GET
        status_code: 200
      retries: 3
      delay: 5