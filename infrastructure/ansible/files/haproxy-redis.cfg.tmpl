global
    maxconn 4096
    log stdout local0
    log stdout local1 notice
    stats socket /var/run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    log     global
    mode    tcp
    option  tcplog
    option  dontlognull
    # Connection timeout - how long to wait for initial connection
    timeout connect 5000
    # Client timeout - max idle time for client connections (10 minutes)
    # Increased from 30s to prevent "Socket closed unexpectedly" errors
    timeout client  600000
    # Server timeout - max idle time for server connections (10 minutes)
    # Matches client timeout to prevent premature disconnections
    timeout server  600000
    # Health check timeout
    timeout check   2000
    retries 3

# Stats interface
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE

# Redis frontend - applications connect here
frontend redis_frontend
    bind *:6380
    mode tcp
    option tcplog
    
    # ACL to detect write commands
    tcp-request inspect-delay 100ms
    tcp-request content accept if WAIT_END
    
    # For now, route all traffic to master to avoid READONLY errors
    # The ACL-based routing is not reliable with modern Redis clients
    # TODO: Implement proper read/write splitting at the application level
    default_backend redis_write

# Write backend - always goes to master
# Note: Currently all traffic goes here to avoid READONLY errors
# TODO: Implement read/write splitting at application level
backend redis_write
    mode tcp
    option tcp-check
    tcp-check send AUTH\ {{ getv "/service/redis/password" "proposalsapp_redis_password" }}\r\n
    tcp-check expect string +OK
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    
    # Master server (dynamically updated by confd)
    {{ $masterFound := false }}
    {{ range gets "/service/redis/instances/*" }}
    {{ $data := json .Value }}
    {{ if eq $data.role "master" }}
    # Master found in etcd
    server {{ $data.name }} {{ $data.host }}:{{ $data.port }} check inter 2s rise 2 fall 3
    {{ end }}
    {{ end }}
    
    # Fallback: If no master is found in etcd (e.g., during failover), 
    # try to connect to all Redis instances and let HAProxy determine the master
    {{ if not $masterFound }}
    {{ range gets "/service/redis/instances/*" }}
    {{ $data := json .Value }}
    server {{ $data.name }}_fallback {{ $data.host }}:{{ $data.port }} check inter 2s rise 2 fall 3
    {{ end }}
    {{ end }}

# Read backend - CURRENTLY UNUSED (all traffic goes to master)
# This will be re-enabled once application-level read/write splitting is implemented
backend redis_read
    mode tcp
    balance roundrobin
    option tcp-check
    tcp-check send AUTH\ {{ getv "/service/redis/password" "proposalsapp_redis_password" }}\r\n
    tcp-check expect string +OK
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    
    # Local datacenter servers - PRIMARY servers for reads
    # ALL reads go here when these servers are healthy
    {{ $local_dc := getenv "LOCAL_DATACENTER" }}
    {{ range gets "/service/redis/instances/*" }}
    {{ $data := json .Value }}
    {{ if eq $data.datacenter $local_dc }}
    server {{ $data.name }} {{ $data.host }}:{{ $data.port }} check inter 2s rise 2 fall 3
    {{ end }}
    {{ end }}
    
    # Remote datacenter servers - BACKUP ONLY
    # Only used when ALL local servers are down
    {{ range gets "/service/redis/instances/*" }}
    {{ $data := json .Value }}
    {{ if ne $data.datacenter $local_dc }}
    server {{ $data.name }}_backup {{ $data.host }}:{{ $data.port }} check inter 2s rise 2 fall 3 backup
    {{ end }}
    {{ end }}

# Redis Sentinel frontend for monitoring
frontend redis_sentinel_frontend
    bind *:26380
    mode tcp
    default_backend redis_sentinel

# Sentinel backend
backend redis_sentinel
    mode tcp
    balance roundrobin
    option tcp-check
    tcp-check connect
    
    {{ range gets "/service/redis-sentinel/instances/*" }}
    {{ $data := json .Value }}
    server {{ $data.name }} {{ $data.host }}:{{ $data.port }} check inter 2s rise 2 fall 3
    {{ end }}
