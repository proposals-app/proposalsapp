# PgCat Configuration - Managed by Confd from etcd
# This file is automatically generated. DO NOT EDIT MANUALLY.

[general]
# Network Configuration
host = "0.0.0.0"
port = 5432

# Admin API Configuration  
admin_username = "pgcat"
admin_password = "changeme"
admin_api_enabled = true

# Metrics and Monitoring
prometheus_exporter_enabled = true
prometheus_exporter_port = 9930

# Connection Pool Settings
pool_mode = "transaction"
default_pool_size = 25
min_pool_size = 10
reserve_pool_size = 5
reserve_pool_timeout = 3000

# Configuration Auto-Reload
config_check_interval = 5000

# Connection Timeouts
connect_timeout = 5000
idle_timeout = 1800000
acquire_timeout = 3000
cancel_wait_timeout = 5000

# Health Check Settings
healthcheck_timeout = 1000
healthcheck_delay = 30000
ban_time = 60000

# Logging Configuration
log_level = "info"
log_connections = false
log_disconnections = false
log_client_parameter_status_changes = false

# Authentication Settings
auth_query_enabled = false
validate_server_cert = false

# TCP Keep-Alive Settings
tcp_user_timeout = 0
server_tcp_keepalive_time = 7200
server_tcp_keepalive_interval = 75
server_tcp_keepalive_count = 9

# Performance Settings
worker_threads = 4

# Prepared Statements Support
prepared_statements = true
prepared_statements_cache_size = 50000

# Database Pool Configuration
[pools.proposalsapp]
pool_mode = "transaction"
default_pool_size = 25
min_pool_size = 10

# Pool-specific prepared statements cache
prepared_statements_cache_size = 50000

# Load Balancing Configuration
# Use "loc" (least outstanding connections) to favor local servers
# Local servers will have fewer outstanding connections due to lower latency
load_balancing_mode = "loc"

# Query Parser Configuration
# CRITICAL: These settings enable read/write splitting
query_parser_enabled = true
query_parser_read_write_splitting = true
primary_reads_enabled = true

# Database User Configuration
[pools.proposalsapp.users.0]
username = "proposalsapp"
password = "4LaM3FI3wIHEr3BObSCUdwRNWZHZSH0SiCyi+chKjs0="
pool_size = 10
statement_timeout = 0

# Dynamic Server List - Based on Patroni cluster state with local-first ordering
[pools.proposalsapp.shards.0]
servers = [
# Local datacenter servers first (for low-latency reads)
{{$local_dc := getv "/local/datacenter"}}
{{range gets "/service/proposalsapp/members/*"}}
{{$member := json .Value}}
{{if eq $member.state "running"}}
    {{$url_parts := split $member.conn_url "//"}}
    {{if gt (len $url_parts) 1}}
        {{$host_port := index (split (index $url_parts 1) "/") 0}}
        {{$host := index (split $host_port ":") 0}}
        {{$port := index (split $host_port ":") 1}}
        {{$local_ip := getv (printf "/local/ips/%s" $local_dc) ""}}
        {{if eq $host $local_ip}}
    ["{{$host}}", {{$port}}, "{{$member.role}}"],
        {{end}}
    {{end}}
{{end}}
{{end}}
# Remote datacenter servers as fallbacks
{{range gets "/service/proposalsapp/members/*"}}
{{$member := json .Value}}
{{if eq $member.state "running"}}
    {{$url_parts := split $member.conn_url "//"}}
    {{if gt (len $url_parts) 1}}
        {{$host_port := index (split (index $url_parts 1) "/") 0}}
        {{$host := index (split $host_port ":") 0}}
        {{$port := index (split $host_port ":") 1}}
        {{$local_ip := getv (printf "/local/ips/%s" $local_dc) ""}}
        {{if ne $host $local_ip}}
    ["{{$host}}", {{$port}}, "{{$member.role}}"],
        {{end}}
    {{end}}
{{end}}
{{end}}
]
database = "proposalsapp"